---
title: "Best Coding Practises"
author: "Marcin Kierczak"
image: "assets/featured.jpg"
format: revealjs
---

##  {visibility="hidden"}

```{r}
#| echo: false
# remotes::install_github("hadley/emo")
library(emo)
```

## Learning Outcomes

<br>

After this module:

- You will be aware of different coding styles.

. . .

- You will know what styles are good `r emo::ji('good')` and bad `r emo::ji('bad')` and why `r emo::ji('question')`.

. . .

- You will know how to decompose a problem before you even start coding.

. . .

- You will understand when there is time for writing a function.

. . .

- Your code will reach new level of awesomeness! `r emo::ji('cool')`.

## Topics of This Block

<br>

- **Style** &mdash; _howTo_style.yourCode?

- **Structure** &mdash; how to think `r emo::ji('thinking')` about the code and manufacture your own building `r emo::ji('construction')` blocks

. . .

- **Debugging** &mdash; my code does not run `r emo::ji('sad')`

- **Profiling** &mdash; now it does run but... out of memory `r emo::ji('bomb')`

- **Optimization** &mdash; making things better `r emo::ji('worker')`

. . .

- **Vectorization** &mdash; more details on optimization via vectorization `r emo::ji('arrow')`

- **Parallelization** &mdash; run things in parallel, rule them all! `r emo::ji('ring')`

## What is Coding Style?

:::: {.columns}
::: {.column width="50%"}
- Naming conventions --- assigning names to variables

- Code formatting --- placement of braces, use of white space characters etc.
:::

::: {.column width="50%"}

![[From: [Behind The Lines](http://geekandpoke.typepad.com/geekandpoke/2010/09/behind-the-lines.html) 2010-09-23. By Oliver Widder, Webcomics Geek And Poke.]{.smaller}](assets/coding_style.jpg){.left height="600px"}
:::
::::

## Naming Conventions

A syntactically valid name:

- Consists of:
  - letters: `r paste0(paste0(letters, collapse=''), paste0(LETTERS, collapse=''))`
  - digits: `r paste(0:9, collapse='')`
  - period: `.`
  - underscore: `_`

- Begins with a letter or the period (`.`) **not** followed by a number

- Cannot be one of the *reserved words*: `if`, `else`, `repeat`, `while`, `function`, `for`, `in`, `next`, `break`, `TRUE`, `FALSE`, `NULL`, `Inf`, `NaN`, `NA`, `NA_integer_`, `NA_real_`, `NA_complex_`, `NA_character_`

- Also cannot be: `c`, `q`, `t`, `C`, `D`, `I` as they are reserved function names.

## Naming Style

Variable names that are legal are not necessarily a good style and they may be dangerous `r emo::ji('danger')`:

```{r logical_values}
F
T
```

```{r the_TF_trap}
F + T  
```

```{r the_TF_trap_cted}
F <- 3  
F + T  
```

```{r reset_false}
#| include: false
T <- TRUE
F <- FALSE
```

do not do this!

. . .

unless you are a politician `r emo::ji('suit')`...

[Avoid `T` and `F` as variable names.]{.large}

## Customary Variable Names

:::: {.columns}
::: {.column}

Also, there is a number of variable names that are traditionally used to name particular variables:

- `usr` &mdash; user
- `pwd` &mdash; password
- `x`, `y`, `z` &mdash; vectors
- `w` &mdash; weights
- `f`, `g` &mdash; functions
- `n` &mdash; number of rows
- `p` &mdash; number of columns
- `i`, `j`, `k` &mdash; indexes
- `df` &mdash; data frame
- `cnt` &mdash; counter
- `M`, `N`, `W` &mdash; matrices
- `tmp` &mdash; temporary variables

:::

::: {.column}

Sometimes these are domain-specific:

- `p`, `q` &mdash; allele frequencies in genetics,
- `N`, `k` &mdash; number of trials and number of successes in stats

[Try to avoid using these in this way to avoid possible confusion.]{.large}

:::
:::

## Different Notations

People use different notation styles throughout their code:

. . .

- `snake_notation_looks_like_this`

. . .

- `camelNotationLooksLikeThis`

. . .

- `period.notation.looks.like.this`

. . .

But many also use...

. . .

- `LousyNotation_looks.likeThis`

. . .

Try to be consistent and stick to one of them. Bear in mind `period.notation` is used by S3 classes to create generic functions, e.g. `plot.my.object`. A good-enough reason to avoid it?

. . .

It is also important to maintain code readability by having your variable names:

- informative, e.g. `genotypes` vs. `fsjht45jkhsdf4`

. . .

- Consistent across your code &mdash; the same naming convention

. . .

- Not too long, e.g. `weight` vs. `phenotype.weight.measured`

## Special Variable Names

Few more things to consider:

- There are built-in variable names:

  - `LETTERS`: the 26 upper-case letters of the Roman alphabet
  - `letters`: the 26 lower-case letters of the Roman alphabet
  - `month.abb`: the three-letter abbreviations for the English month names
  - `month.name`: the English names for the months of the year
  - `pi`: the ratio of the circumference of a circle to its diameter

- Variable names beginning with period are **hidden**: `.my_secret_variable` `r emo::ji('ghost')` will not be shown but can be accessed

```{r hidden_vars}
.the_hidden_answer <- 42
ls()
```

. . .

but with a bit of effort you can see them:

```{r show_hidden_vars}
ls(all.names = TRUE)
```

## Structure Your Code

Decompose the problem `r emo::ji('puzzle')` `r emo::ji('puzzle')`!

[
  ![](assets/Philip-ii-of-macedon.jpg){height="200px"}
  ![](assets/Julius_Ceasar.jpg){height="200px"}
  ![](assets/Napoleon_Bonaparte.jpg){height="200px"}  
  [source: Wikimedia Commons]{.smaller}  
]{.center}

. . .

- *divide et impera* / top-down approach &mdash; split your BIG problem into a number of small sub-problems recursively and, **at some level**, encapsulate your code in functional blocks (functions)

. . .

- a function should be performing a small task, it should be a logical program unit

. . . 

**when should I write a function `r emo::ji('question')`**

. . .

- one screen `r emo::ji('screen')` rule (resolution...),
- re-use twice rule of `r emo::ji('thumbs_up')`.

. . .

consider creating an S4 or even an R6 class &mdash; data-type safety!

## How to write functions

- avoid accessing and modifying globals
  - avoid `r emo::ji('no')` `a <<- 42`
  - and `r emo::ji('yes')` use a **closure** instead

. . .

```{r closure_for_global}
new_counter <- function() {
  i <- 0
  function() {
    # do something useful, then ...
    i <<- i + 1
    i
  }
}

counter1 <- new_counter()
counter2 <- new_counter()
counter1()
counter1()
counter2()
```

[based on Stackoverflow [answer](https://stackoverflow.com/questions/2628621/how-do-you-use-scoping-assignment-in-r)]{.smaller}

## How to write functions

- use **data** as the **very first** argument for `%>%` pipes sake:
  - `myfun <- function(x, arg)` `r emo::ji('yes')`
  - `myfun <- function(arg, x)` `r emo::ji('no')`

. . .

- set arguments to defaults &mdash; better too many args than too few:
  - `myfun <- function(x, seed = 42)` `r emo::ji('yes')`
  - `myfun <- function(x, ...)` `r emo::ji('no')`

. . .

- remember that global defaults can be changed by `options`

## Wrapper function

If you are re-using functions written by someone else &mdash; write a wrapper function around them

:::{.columns}
:::{.column width="50%"}
```{r wrapper-fn1}
my_awesome_plot <- function(x, ...) {
  plot(x, col='red', pch=19, cex.axis=.7, ...)
}
```
:::
:::{.column width="50%"}
```{r wrapper-fn-plot}
#| fig-height: 3
#| fig-width: 4
#| error: true
my_awesome_plot(1:5, col = 'blue')
my_awesome_plot(1:5, las = 1)
```
:::
:::
## How to write functions

- showing progress and messages is good, but let the others turn this functionality off

. . .

- if you are calling other functions, consider using `...`

<br><br>

. . .

[
![](assets/goto.png){height="300px"}
<br>
[source: http://www.xkcd/com/292]{.smaller}
]{.center}

## {background-image="../../assets/images/cover.jpg"}

### Thank you! Questions?

```{r}
#| echo: false
R.version[c("platform","os","major","minor")]
```

[2023 • [SciLifeLab](https://www.scilifelab.se/) • [NBIS](https://nbis.se/) • [RaukR](https://nbisweden.github.io/workshop-RaukR-2306/)]{.smaller}
