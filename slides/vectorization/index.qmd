---
title: "Vectorization in R"
author: "Marcin Kierczak"
image: "assets/featured.jpg"
format: revealjs
---

## {visibility="hidden"}

```{r}
#| echo: false
library(tidyverse)
library(emo)
library(peakRAM)
#library(ggplot2)
```

## Learning Outcomes

By the end of this module, you will:

- understand how to write more efficient loops
- be able to vectorize most loops
- understand how the `apply*` functions work
- be aware of the `purrr` package
- understand what a recursive call is

## The simplest of all `for` loops

Say, we want to add 1 to every element of a vector:

```{r for.loop.ex1}
vec <- c(1:5)
vec
for (i in vec) {
  vec[i] <- vec[i] + 1
}
vec
```

. . .

Exactly the same can be achieved in R by means of **vectorization**:

```{r for.loop.avoid}
vec <- c(1:5)
vec + 1
```

Which is better than? `r emo::ji('confused')`

## Repeating actions &mdash; vectorization

Let us compare the time of execution of the vectorized version (vector with 10,000 elements):

```{r for.loop.avoid.timing}
#| echo: false

vec <- c(1:1e6)
ptm <- proc.time()
vec <- vec + 1
proc.time() - ptm # vectorized
```

. . .

to the loop version:

```{r for.loop.avoid.timing2}
#| echo: false

vec <- c(1:1e6)
ptm <- proc.time()
for (i in vec) {
  vec[i] <- vec[i] + 1
}
proc.time() - ptm # for-loop
```

## Vectorization &mdash; the problem

```{r is_a_droid}
#| error: true
is_a_droid <- function(x) {
  droids <- c('2-1B', '4-LOM', '8D8', '0-0-0', 'AP-5', 'AZI-3', 'Mister Bones', 'BB-8', 'BB-9E', 'BD-1', 'BT-1', 'C1-10P', 'C-3PO', 'R2-D2')
  if (x %in% droids) {
    return(T)
  } else {
    return(F)
  }
}

test <- c('Anakin', 'Vader', 'R2-D2', 'AZI-3', 'Luke')
is_a_droid(test)
```

## Vectorization &mdash; the solution(s)

The `base::Vectorize` way:

```{r vec_is_a_droid}
vectorized_is_a_droid <- base::Vectorize(is_a_droid, vectorize.args = c('x'))
vectorized_is_a_droid(test)
```

. . .

The `apply*` way:

```{r, error=T}
apply(as.matrix(test), FUN = is_a_droid, MARGIN = 1)
```

. . .

```{r}
lapply(test, FUN=is_a_droid) %>% unlist()
```

. . .

```{r}
sapply(test, is_a_droid)
```

## Vectorization &mdash; the solution(s)

The `vapply`:

```{r}
vapply(test, is_a_droid, FUN.VALUE = TRUE)
```

. . .

```{r}
vapply(test, is_a_droid, FUN.VALUE = 1)
```

. . .

```{r}
#| error: true
vapply(test, is_a_droid, FUN.VALUE = c(1,0))
vapply(test, is_a_droid, FUN.VALUE = 'a')
```

. . .

Or the `purrr` way:

```{r}
purrr::map(test, is_a_droid) %>% unlist()
```

## Recursion

When we explicitly repeat an action using a loop, we talk about **iteration**. We can also repeat actions by means of **recursion**, i.e. when a function calls itself. Let us implement a factorial $!$:

```{r rec.fact}
factorial.rec <- function(x) {
  if (x == 0 || x == 1)
    return(1)
  else
    return(x * factorial.rec(x - 1)) # Recursive call!
}
factorial.rec(5)
```

## Recursion = iteration?

Yes, every iteration can be converted to recursion (Church-Turing conjecture) and *vice versa*. It is not always obvious, but theoretically it is doable. Let's see how to implement *factorial* in iterative manner:

```{r rec.fact.iter}
factorial.iter <- function(x) {
  if (x == 0 || x == 1)
    return(1)
  else {
    tmp <- 1
    for (i in 2:x) {
      tmp <- tmp * i
    }
    return(tmp)  
  }
}
factorial.iter(5)
```

## Recursion == iteration, really?

More writing for the iterative version, right? What about the time efficiency?  
The recursive version:

```{r rec.fact.timing}
#| echo: false
#| error: true
peakRAM::peakRAM(factorial.rec(2000))
```

And the iterative one:

```{r iter.fact.timing}
#| echo: false

peakRAM::peakRAM(factorial.iter(2000))
```

## Loops &mdash; avoid growing data

Avoid changing dimensions of an object inside the loop:

```{r avoid.growing}
v <- c() # Initialize
for (i in 1:100) {
  v <- c(v, i)
}
```

. . .

It is much better to do it like this:

```{r avoid.growing2}
v <- rep(NA, 100) # Initialize with length
for (i in 1:100) {
  v[i] <- i
}
```

## {background-image="../../assets/images/cover.jpg"}

### Thank you! Questions?

```{r}
#| echo: false
R.version[c("platform","os","major","minor")]
```

[2023 • [SciLifeLab](https://www.scilifelab.se/) • [NBIS](https://nbis.se/) • [RaukR](https://nbisweden.github.io/workshop-RaukR-2306/)]{.smaller}
