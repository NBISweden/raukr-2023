---
title: "Publishing"
author: "Roy Francis"
description: "Publishing code, markup and documentation reproducibly in R."
image: "assets/featured.jpg"
format: html
---

```{r}
#| echo: false
library(ggplot2)
library(dplyr)
library(stringr)
```

::: callout-note
These are a series of exercises to help you get started with reproducible research using R. You can consult the [RMarkdown guide](https://quarto.org/docs/authoring/markdown-basics.html) or [RMarkdown cheatsheet](https://www.rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf) for quick reference. A complete guide to RMarkdown is available [here](https://bookdown.org/yihui/rmarkdown/).

- Familiarise yourself with Markdown/RMarkdown/Quarto syntax and commonly used snippets.
- Set up a project in R
- Prepare an RMarkdown document
- Add content and export to some common formats
- Introduction to Quarto
:::

## RStudio

Create a new project in RStudio by going to `File > New Project > New Directory`. Select `New Project` if required. Then label the project name and the directory. An empty project is created. The R session has been refreshed. All variables are removed and the environment is cleared.

Create a new RMarkdown file by going to `File > New File > RMarkdown...`. Use the default options.

## R environment

### Conda

The environment within R is going to be managed by `renv`, while lower level, such as versions of R, can be managed by [Conda](https://docs.conda.io) management system. You can skip Conda at the moment, if you want, install `renv` package using `install.packages("renv")` on R, and continue to `renv` section below, instead. Regarding Conda, please refer to the [link](https://docs.conda.io) for questions about the installation. If your project includes programs written in other programming languages, e.g. Python, the overall environment can be managed by Conda. NBIS has a dedicated workshop titled [**Tools for reproducible research**](https://nbis-reproducible-research.readthedocs.io/en/latest/) which covers more on Conda and other programs for reproducible research.

For R, we can start with a simple environment file by creating a file named `environment.yml` having following text. It describes which versions of R, `renv` and `tidyverse` are to be installed. The file should be created on the folder of your project, as `fancy_project/environment.yml`.

```      
channels:
  - conda-forge
dependencies:
  - conda-forge::r=4.0
  - conda-forge::r-renv=0.12.1
  - conda-forge::r-tidyverse=1.3.0
```

Using Terminal (Mac/Linux) or Command line (Windows), run following commands to create an environment and activate it.

```
conda env create -n fancy_env -f environment.yml
conda activate fancy_env
```

## renv

The environment within R, e.g. installed packages, is managed by `renv`. A good reference about the package is available at [**Introduction to `renv`**](https://rstudio.github.io/renv/articles/renv.html).

### Store R environment

The first step is the initialization of a local environment using the command in R below.

```{r}
#| eval: false
renv::init()
```

As an alternative, you could choose to initialize `renv` when an R project is created as shown below. After the command, you may find `renv` folder and `renv.lock` file created. Check the file `renv.lock` using a text viewer or `less` command on Mac/Linux.

![](assets/alternative_renv_init.png){width="400px"}

Whenever a package should be installed, please use `renv::install` instead of `install.packages` as below.

```{r}
#| eval: false
renv::install("dplyr")  # from CRAN
renv::install("bioc::Biobase")  # from Bioconductor
renv::install("StoreyLab/qvalue")   # from GitHub
# from GitLab/Bitbucket
# renv::install("[gitlab|bitbucket]::`*user name*`/`*repository*`")
```

The current status of R environment of your project can be stored by calling `renv::snapshot()`. Please note that the function checks all R scripts under your R project folder. It updates `renv.lock` for the packages loaded in the scripts only. Check `renv.lock` file again after calling the `renv::snapshot()`. If no R script was created under the project folder yet, surprisingly no change in `renv.lock` will be found.

Now, create a simple R script that loads one of the packages you installed, for example, a file named `test.R` that has just one line shown below.

```{r}
#| eval: false
library(dplyr)
```

Call `renv::snapshot()` and check the `renv.lock` file. You will see it becomes so long, now.

The `renv::snapshot()` command doesn't have to be called every time a package is installed. Just make sure it should be called when an environment is to be stored, e.g. before sharing the codes and the environment with colleagues.

### Restore the environment

The environment can be restored on a new place by the commands below.

```{r}
#| eval: false
renv::init()
renv::restore()
```

We can test it by creating a new R project. Copy your scripts but also `renv.lock` to the folder of the new R project, run the commands above on R and find what the R installs. Please note that **no contents under `renv`** folder is needed to restore the R environment.

