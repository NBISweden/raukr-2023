{
  "hash": "dad377e92da69673d96c938283ae0292",
  "result": {
    "markdown": "---\ntitle: \"Publishing with Quarto\"\nauthor: \"Roy Francis\"\nimage: \"assets/featured.jpg\"\nformat: revealjs\n---\n\n\n## Publishing\n\n- [Literate programming](https://en.wikipedia.org/wiki/Literate_programming): Combining code with narrative\n- Documentation and reporting\n- Presentation\n- Websites\n- E-books\n- PDFs\n\n. . .\n\n[[https://quarto.org/docs/gallery/](https://quarto.org/docs/gallery/)]{.large}\n\n## [Quarto](https://quarto.org/)\n\n**An open-source scientific and technical publishing system built on Pandoc.**\n\n:::: {.columns}\n::: {.column width=\"70\"}\n\n- Command-line tool enabling weaving code and documentation using Python, R, Julia, and Observable.\n- Supports Knitr (plain text, markdown) or Jupyter engines.\n- Supports many IDEs\n  - RStudio\n  - JupyterLab\n  - VS Code\n  - Neovim\n- Numerous output formats\n  - Documents (HTML, PDF, MS Word)\n  - Presentations (RevealJS, Powerpoint, Beamer)\n  - Websites, Blogs, E-Books\n  - Interactive (ObservableJS, Shiny)\n\n:::\n\n::: {.column width=\"30\"}\n\n- Features and components\n  - Scientific markdown\n  - Tables & Figures\n  - Equations\n  - Citations\n  - Call-Out\n  - Layout\n\n:::\n::::\n\n## How it all works\n\n![](assets/flow.jpg){width=\"90%\"}\n\n## Output formats\n\n::: {style='text-align=\"left\"'}\n\n|Rmd                    |Quarto                      |\n|-----------------------|----------------------------|\n|html_document          |html                        |\n|pdf_document           |pdf                         |\n|word_document          |docx                        |\n|beamer_presentation    |beamer                      |\n|powerpoint_presentation|pptx                        |\n|revealjs               |revealjs                    |\n|xaringan               |                            |\n|distill/tufte          |quarto article layout       |\n|html_document2         |quarto crossref             |\n|pdf_document2          |quarto crossref             |\n|word_document2         |quarto crossref             |\n|blogdown/distill       |quarto website/quarto blog  |\n|bookdown               |quarto books                |\n|shiny documents        |quarto interactive documents|\n|pagedown               |TBA                         |\n|rticles                |TBA                         |\n|flexdashboard          |TBA                         |\n\n:::\n\n## Quarto anatomy\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n<br>\n\n````\n---\ntitle: \"Iris report\"\nauthor: \"John Doe\"\ndate: \"4-Mar-2023\"\nformat: html\n---\n\n## Iris\n\nLet's explore the **iris** dataset.\n\n```{{r}}\n#| echo: true\nhead(iris)\n```\n````\n\n:::\n::: {.column width=\"50%\"}\n\n![](assets/anatomy.png)\n\n:::\n::::\n\n## Quarto anatomy\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n![](assets/anatomy-parts.png)\n\n:::\n::: {.column width=\"50%\"}\n\n<br>\n\n[Metadata (YAML)]{.large}\n\n<br>\n<br>\n<br>\n\n[Text (Markdown)]{.large}\n\n<br>\n\n[Code (R, Python, Julia, Observable)]{.large}\n\n:::\n::::\n\n[Literate programming](https://en.wikipedia.org/wiki/Literate_programming) is natural language interspersed with programming code for the purpose of documentation, reproducibility and accessibility particularly relevant in data science.\n\n## YAML metadata\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n- Yet Another Markup Language (YAML)\n\n```\n---\nkey: value\n---\n```\n\n- 2 space indentation\n\n```\nformat:\n  html:\n    smooth-scroll: true\n```\n\n- Strings\n```\ndescription: \"This report contains...\"\n```\n- Multiline string (Literal/Folded)\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n```\ndescription: |\n  This is\n  a multiline\n  string\n```\n\n:::\n::: {.column width=\"48%\"}\n\n```\ndescription: >\n  This is\n  a multiline\n  string\n```\n\n:::\n::::\n\n:::\n::: {.column width=\"50%\"}\n\n- Arrays\n\n```\nitems: [ 1, 2, 3, 4, 5 ]\nnames: [ \"one\", \"two\", \"three\" ]\nnames:\n  - \"one\"\n  - \"two\"\n  - \"three\"\n```\n\n- Dictionary arrays\n\n```\nitems:\n  - things:\n      thing1: huey\n      things2: dewey\n      thing3: louie\n  - other things:\n      key: value\n```\n\n:::\n::::\n\n[[YAML basics](https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started)]{.smaller}\n\n## YAML metadata\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n<br>\n\n````\n---\ntitle: \"Iris report\"\nauthor: \"John Doe\"\ndate: \"4-Mar-2023\"\nformat:\n  html:\n    toc: true\n    number-sections: true\nexecute:\n  echo: false\n  warning: false\n---\n\n## Iris\n\nLet's explore the **iris** dataset.\n\n### Table\n\n```{{r}}\n#| echo: true\niris[1:3,]\n```\n\n### Plot\n\n```{{r}}\n#| label: fig-hist-sepal\n#| fig-cap: \"Distribution of Sepal lengths.\"\n#| fig-height: 3\nhist(iris$Sepal.Length)\n```\n````\n\n:::\n::: {.column width=\"50%\"}\n\n![](assets/yaml-metadata-preview.png)\n\n:::\n::::\n\n## YAML metadata\n\n```         \ntitle: Report\nsubtitle: Topic\ndate: today\nauthor: \"John Doe\"\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    number-sections: true\n    code-fold: true\n    df-print: paged\n\nexecute:\n  eval: true\n  echo: false\n  warning: false\n  message: false\n  freeze: true\n```\n\n::: {.aside}\n[HTML YAML documentation](https://quarto.org/docs/reference/formats/html.html)  \n[PDF YAML documentation](https://quarto.org/docs/reference/formats/pdf.html)\n:::\n\n## Markdown\n\nHuman readable markup\n\n:::: {.columns}\n::: {.column width=\"25%\"}\n\n```         \n### Heading 3\n\n#### Heading 4\n\n*italic text*  \n**bold text**  \n`code text`  \n\n~~strikethrough~~  \n2^10^  \n2~10~  \n$2^{10}$  \n$2_{10}$  \n```\n:::\n\n::: {.column width=\"25%\"}\n### Heading 3\n\n#### Heading 4\n\n*italic text*  \n**bold text**  \n`code text`  \n~~strikethrough~~  \n2<sup>10</sup>  \n2<sub>10</sub>  \n$2^{10}$  \n$2_{10}$\n:::\n\n::: {.column width=\"28%\"}\n```         \n$\\sum\\limits_{n=1}^{10} \\frac{3}{2}\\cdot n$\n\n- bullet point\n\nLink to [this](somewhere.com)\n\n![](https://www.r-project.org/Rlogo.png)\n\n![](https://www.r-project.org/Rlogo.png){width=\"50%\"}\n```\n:::\n\n::: {.column width=\"22%\"}\n$\\sum\\limits_{n=1}^{10} \\frac{3}{2}\\cdot n$\n\n- bullet point\n\nLink to [this](somewhere.com)\n\n![](https://www.r-project.org/Rlogo.png)\n\n![](https://www.r-project.org/Rlogo.png){width=\"20%\"}\n:::\n::::\n\n::: {.notes}\n\n- Support pure HTML for complex formatting\n- Many variations\n  - [John Gruber's original](https://daringfireball.net/projects/markdown/syntax)\n  - [GitHub Flavored Markdown (GFM)](https://github.github.com/gfm/)\n  - [Pandoc](https://pandoc.org/MANUAL.html#pandocs-markdown)\n  - [MultiMarkdown](https://fletcherpenney.net/multimarkdown/)\n  - [![](assets/cm.png)](https://commonmark.org/)\n- Pandoc supports conversion to multiple output formats\n- To compare MD variants [![](assets/bm.png)](https://babelmark.github.io)\n:::\n\n## RMarkdown\n\n- Markdown + embedded R chunks\n- RMarkdown mostly uses [Pandoc markdown](https://rmarkdown.rstudio.com/authoring_pandoc_markdown.html%23raw-tex#pandoc_markdown)\n- R code can be executed inline\n\nToday's date is `` `r date()` ``    \nToday's date is Sun Mar 26 23:25:31 2023\n\n- R code can be executed in code chunks\n\n````\n```{{r}}\ndate()\n```\n````\n\n- By default, input source code and output results are displayed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sun Mar 26 23:25:31 2023\"\n```\n:::\n:::\n\n\n## RMarkdown • Chunk options\n\n- Setting chunk options\n\n````\n```{{r}}\n#| eval: false\ndate()\n```\n````\n\n- Chunk options define how chunks behave\n  - `eval: false` to not evaluate a code chunk\n  - `echo: false` to hide input code\n  - `output: true` to show output, `asis` to skip styling\n  - `warning: false` hides warnins\n  - `message: false` hides messages\n  - `error: true` shows error message and continues code execution\n  - `include: false` supresses all output\n- Other chunk options include figure options and captions\n\n::: {.aside}\n[Chunk option documentation](https://quarto.org/docs/computations/execution-options.html)\n:::\n\n## Installation\n\n- Install the latest [quarto executable](https://quarto.org/docs/get-started/)\n- If using [RStudio](https://posit.co/download/rstudio-desktop/), you need a version *v2022.07.1* or newer\n- Optionally, [Visual Studio Code](https://code.visualstudio.com/) along with quarto extension is a great option too\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n![](assets/rstudio-preview.png)\n:::\n\n::: {.column width=\"50%\"}\n![](assets/vscode-preview.png)\n:::\n::::\n\n## RStudio • Notebook\n\n- Create a file that ends in `.qmd`  \n**File > New File > Quarto Document**\n\n- Add YAML matter to top\n\n```         \n---\ntitle: \"This is a title\"\nformat: html\n---\n```\n\n- Text & visual editor\n- Render interactively using the **Render** button\n- Render from R console `quarto::quarto_render(\"report.qmd\")`\n- Render from terminal `quarto render report.qmd`\n\n::: {.notes}\nR Notebook demonstration.\n- Text editor\n- Visual editor\n:::\n\n## PDF\n\n## RevealJS\n\n## parameterised reports\n\n## Projects\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n- Render all files as a project\n- Share YAML configuration across formats\n- Examples of project: **website**, **book**\n- Defined in `_quarto.yml`\n\n```         \nproject:\n  output-dir: _output\n\ntoc: true\nnumber-sections: true\n  \nformat:\n  html:\n    css: styles.css\n  pdf:\n    documentclass: report\n    margin-left: 30mm\n```\n:::\n\n::: {.column width=\"50%\"}\n\n- Directory level metadata is also allowed\n\n```         \nproject:\n  type: website\n  \nmetadata-files:\n  - _website.yml\n```\n\n- YAML merging priority:  \n  **root < directory level < document**\n- Render all files: `quarto render`\n\n:::\n::::\n\n::: {.aside}\n[Project documentation](https://quarto.org/docs/projects/quarto-projects.html)\n:::\n\n## Interactive documents\n\n- Shiny\n- Observable\n\n## Quarto from the terminal\n\n```         \n🢒  quarto --help\n\n  Commands:\n\n    render          [input] [args...]     - Render files or projects to various document types.        \n    preview         [file] [args...]      - Render and preview a document or website project.          \n    serve           [input]               - Serve a Shiny interactive document.                        \n    create          [type] [commands...]  - Create a Quarto project or extension                       \n    create-project  [dir]                 - Create a project for rendering multiple documents          \n    convert         <input>               - Convert documents to alternate representations.            \n    pandoc          [args...]             - Run the version of Pandoc embedded within Quarto.          \n    run             [script] [args...]    - Run a TypeScript, R, Python, or Lua script.                \n    add             <extension>           - Add an extension to this folder or project                 \n    install         [target...]           - Installs an extension or global dependency.                \n    publish         [provider] [path]     - Publish a document or project. Available providers include:\n    check           [target]              - Verify correct functioning of Quarto installation.         \n    help            [command]             - Show this help or the help of a sub-command. \n```\n\n## Extending Quarto\n\n\n[Awesome Quarto](https://github.com/mcanouil/awesome-quarto)\n\n## Compared to Rmd\n\n- Quarto is a command-line tool independent of R\n- Supports multiple languages seamlessly (R, Python, Julia, Observable)\n- YAML options maybe slightly different in quarto. Quarto uses hyphens instead of underscores.\n  - `toc_depth` becomes `toc-depth`\n  - `number_sections` becomes `number-sections`\n  - `code_folding` becomes `code-fold`\n- Chunk options are specified inside the chunk like `#| echo: false` rather than `r{echo=FALSE}`\n- Many more chunk options are available including figure captions and layout\n- CSS classes are easier to use using `:::` notation\n- Many additional functionality out of the box\n  - Page layouts\n  - Figure layouts\n  - Figure captions and numbering\n  - Call-Outs\n  - Cross referencing\n  - Citation\n  - Bibliography\n  - Margin content\n- Quarto supports htmlwidgets in R and jupyter widgets for Python/Julia\n- Interactivity\n  - Client-side interactivity using ObservableJS\n  - Server-side interactivity using Shiny\n\n## Acknowledgements\n\n- [quarto.org](https://quarto.org/)\n- [Quarto workshop by Tom Mock](https://www.youtube.com/watch?v=yvi5uXQMvu4)\n- [Quarto introduction by Julia Müller](https://www.youtube.com/watch?v=shVSmYna3GM)\n- [Authoring Quarto](https://rstudio-conf-2022.github.io/get-started-quarto/materials/02-authoring.html#/authoring-quarto)\n\n## {background-image=\"../../assets/images/cover.jpg\"}\n\n### Thank you! Questions?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n         _                     \nplatform x86_64-conda-linux-gnu\nos       linux-gnu             \nmajor    4                     \nminor    2.2                   \n```\n:::\n:::\n\n\n[2023 • [SciLifeLab](https://www.scilifelab.se/) • [NBIS](https://nbis.se/) • [RaukR](https://nbisweden.github.io/workshop-RaukR-2306/)]{.smaller}",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}