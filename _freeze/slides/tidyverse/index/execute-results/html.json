{
  "hash": "c21c23711709eb6647d4bf26a5091af5",
  "result": {
    "markdown": "---\ntitle: \"Tidy work in Tidyverse\"\nauthor: \"Marcin Kierczak\"\nimage: \"assets/featured.jpg\"\nformat: revealjs\n---\n\n\n## {visibility=\"hidden\"}\n\n\n::: {.cell}\n\n:::\n\n\n## Learning Outcomes\n\nWhen this module is complete, you will:\n\n- know what `tidyverse` is and a bit about its history\n- be able to use different pipes, including advanced ones and placeholders\n- know whether the data you work with are tidy\n- will be able to load, debug and tidy your data\n- understand how to combine datasets using `join_*` \n- be aware of useful packages within `tidyverse`\n\n## Tidyverse &mdash; what is it all about?\n\n- [tidyverse](http://www.tidyverse.org) is a collection of packages üì¶ \n- created by [Hadley Wickham](http://hadley.nz)\n- constantly gains popularity üìà, \n- has became a *de facto* standard in data analyses,\n- knowing how to use it can increase your salary üí∞ \n- a philosophy of programming or a programming paradigm\n- everything is about üåä the flow of üßπ *tidy data*\n\n. . .\n\n::: {layout.ncol=3}\n![](assets/hex-tidyverse.png){height=\"250px\"}\n![](assets/Hadley-wickham2016-02-04.jpeg){height=\"250px\"}\n![](assets/RforDataScience.jpeg){height=\"250px\"}\n:::\n\n::: {.aside}\nImages: www.tidyverse.org, Wikipedia, www.tidyverse.org\n:::\n\n## Typical Tidyverse Workflow\n\n‚ò†Ô∏è The tidyverse curse? ‚ò†Ô∏è<br>\n\n. . .\n\n::: {.blockquote}\n*Navigating the balance between base R and the tidyverse is a challenge to learn.*  \n[- Robert A. Muenchen](http://r4stats.com/articles/why-r-is-hard-to-learn/)\n:::\n\n. . .\n\n![](assets/tidyverse-flow.png){height=\"400px\"}  \n[[Source: http://www.storybench.org/getting-started-with-tidyverse-in-r/]{.smaller}](http://www.storybench.org/getting-started-with-tidyverse-in-r/)\n\n## Introduction to Pipes\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n![](assets/MagrittePipe.jpg)\n\n[Rene Magritt, *[La trahison des images](https://en.wikipedia.org/wiki/The_Treachery_of_Images)*, [Wikimedia Commons](https://en.wikipedia.org/wiki/The_Treachery_of_Images#/media/File:MagrittePipe.jpg)]{.smaller}\n\n<br>\n\n![](assets/magrittr.png)\n\n:::\n\n::: {.column width=\"50%\"}\n\n- let the data flow üåä...\n- `magrittr` package &mdash; `tidyverse` and beyond\n- the `%>%` pipe\n  - `x %>% f` $\\equiv$ `f(x)`\n  - `x %>% f(y)` $\\equiv$ `f(x, y)`\n  - `x %>% f %>% g %>% h` $\\equiv$ `h(g(f(x)))`\n:::\n::::\n\n## Introduction to Pipes\n\nInstead of writing this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- iris\ndata <- head(data, n=3)\n```\n:::\n\n\nwrite this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% head(n=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n```\n:::\n:::\n\n\n## Other Types of Pipes &mdash; `%T>%`\n\n- Provided by `magritter`, not in `tidyverse`\n- When you call a function for its *side effects*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(50) %>% \n  matrix(ncol = 2) %>% \n  plot() %>% \n  summary()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/magrittr2a-1.png){width=384}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nLength  Class   Mode \n     0   NULL   NULL \n```\n:::\n:::\n\n\n## Other Types of Pipes &mdash; `%T>%`\n\n![](assets/T-pipe.png){height=\"180px\"}\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-2-1.png){width=384}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n       V1                V2         \n Min.   :-1.3069   Min.   :-2.0331  \n 1st Qu.:-0.3108   1st Qu.:-0.9381  \n Median : 0.4942   Median :-0.3499  \n Mean   : 0.3522   Mean   :-0.3555  \n 3rd Qu.: 0.9977   3rd Qu.: 0.1502  \n Max.   : 1.9151   Max.   : 1.2726  \n```\n:::\n:::\n\n\n## Other Types of `magrittr` Pipes &mdash; `%$%`\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% cor(Sepal.Length, Sepal.Width)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in pmatch(use, c(\"all.obs\", \"complete.obs\", \"pairwise.complete.obs\", : object 'Sepal.Width' not found\n```\n:::\n:::\n\n\n. . .\n\nWe need the `%$%` pipe with exposition of variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %$% cor(Sepal.Length, Sepal.Width)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.1175698\n```\n:::\n:::\n\n\n. . .\n\nThis is because `cor` function does not have the `x` (data) argument &ndash; the very first argument of a pipe-friendly function.\n\n## Other Types of `magrittr` Pipes &mdash; %<>%\n\nIt exists but can lead to somewhat confusing code! ‚ò†Ô∏è\n\n`x %<>% f` $\\equiv$ `x <- f(x)`\n\n::: {.cell}\n\n```{.r .cell-code}\nM <- matrix(rnorm(16), nrow=4)\nM %<>% colSums()\nM\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1.559893014  0.637565789 -1.712424914 -0.008973775\n```\n:::\n:::\n\n\nFrom R >= 4.1.0 we have a native `|>` pipe that is a bit faster than `%>%` but currently has no placeholders mechanism. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3,4,5) |> mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nbut \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> (\\(x) lm(mpg ~ disp, data = x))()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mpg ~ disp, data = x)\n\nCoefficients:\n(Intercept)         disp  \n   29.59985     -0.04122  \n```\n:::\n:::\n\n\n## Placeholders in `magrittr` Pipes\n\nSometimes we want to pass the resulting data to *other than the first* argument of the next function in chain. `magritter` provides placeholder mechanism for this:\n- `x %>% f(y, .)` $\\equiv$ `f(y, x)`,\n- `x %>% f(y, z = .)` $\\equiv$ `f(y, z = x)`.\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM <- rnorm(4) %>% matrix(nrow = 2)\nM %>% `%*%`(., .)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          [,1]       [,2]\n[1,] 0.1800489 0.01405156\n[2,] 0.7461328 0.62739108\n```\n:::\n:::\n\n\n. . .\n\nBut for nested expressions:\n\n- `x %>% f(a = p(.), b = q(.))` $\\equiv$ `f(x, a = p(x), b = q(x))`\n- `x %>% {f(a = p(.), b = q(.))}` $\\equiv$ `f(a = p(x), b = q(x))`\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_M_summ <- function(nrow, ncol) {\n  paste0('Matrix M has: ', nrow, ' rows and ', ncol, ' columns.')\n}\nM %>% {print_M_summ(nrow(.), ncol(.))}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Matrix M has: 2 rows and 2 columns.\"\n```\n:::\n:::\n\n\n## Tibbles\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n![](assets/hex-tidyverse.png){width=\"30%\" .center}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tibble(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 150 √ó 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ‚Ä¶ with 140 more rows\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\n\n- `tibble` is one of the unifying features of tidyverse,\n- it is a *better* `data.frame` realization,\n- objects `data.frame` can be coerced to `tibble` using `as_tibble()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  tibble(\n    x = 1,          # recycling\n    y = runif(50), \n    z = x + y^2,\n    outcome = rnorm(50)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 √ó 4\n       x      y     z outcome\n   <dbl>  <dbl> <dbl>   <dbl>\n 1     1 0.192   1.04  -0.838\n 2     1 0.896   1.80  -0.123\n 3     1 0.180   1.03  -3.14 \n 4     1 0.103   1.01   0.783\n 5     1 0.550   1.30   2.22 \n 6     1 0.912   1.83  -0.355\n 7     1 0.0261  1.00  -1.15 \n 8     1 0.532   1.28   0.134\n 9     1 0.589   1.35   1.21 \n10     1 0.414   1.17  -1.52 \n# ‚Ä¶ with 40 more rows\n```\n:::\n:::\n\n\n:::\n::::\n\n## More on Tibbles\n\n- When you print a `tibble`:\n  - all columns that fit the screen are shown,\n  - only the first 10 rows are shown,\n  - data type for each column is shown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tibble(cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 √ó 2\n   speed  dist\n   <dbl> <dbl>\n 1     4     2\n 2     4    10\n 3     7     4\n 4     7    22\n 5     8    16\n 6     9    10\n 7    10    18\n 8    10    26\n 9    10    34\n10    11    17\n# ‚Ä¶ with 40 more rows\n```\n:::\n:::\n\n\n- `my_tibble %>% print(n = 50, width = Inf)`,\n- `options(tibble.print_min = 15, tibble.print_max = 25)`,\n- `options(dplyr.print_min = Inf)`,\n- `options(tibble.width = Inf)`\n\n## Subsetting Tibbles\n\n**vehicles** will be our `tibble` version of `cars`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvehicles <- as_tibble(cars[1:5,])\n```\n:::\n\n\n. . .\n\nWe can access data like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvehicles[['speed']]\nvehicles[[1]]\nvehicles$speed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 4 7 7 8\n[1] 4 4 7 7 8\n[1] 4 4 7 7 8\n```\n:::\n:::\n\n\n. . .\n\nOr, alternatively, using placeholders:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvehicles %>% .$dist\nvehicles %>% .[['dist']]\nvehicles %>% .[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2 10  4 22 16\n[1]  2 10  4 22 16\n[1]  2 10  4 22 16\n```\n:::\n:::\n\n\n. . .\n\n**Note!** Not all old R functions work with tibbles, than you have to use `as.data.frame(my_tibble)`.\n\n\n## Tibbles are Stricter than `data.frames`\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"speed\" \"dist\" \n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars$spe      # partial matching\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 4 7 7 8\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvehicles$spe  # no partial matching\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `spe`.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars$gear\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvehicles$gear\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `gear`.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\n## Use tibbles; they are real!\n\n![](assets/tibble_tweet.jpg)\n\n## Loading Data\n\nIn `tidyverse` you import data using `readr` package that provides a number of useful data import functions:\n\n- `read_delim()` a generic function for reading *-delimited files. There are a number of convenience wrappers:\n  - `read_csv()` used to read comma-delimited files,\n  - `read_csv2()` reads semicolon-delimited files, \n  `read_tsv()` that reads tab-delimited files.\n- `read_fwf` for reading fixed-width files with its wrappers:\n  - fwf_widths() for width-based reading,\n  - fwf_positions() for positions-based reading and\n  - read_table() for reading white space-delimited fixed-width files.\n- `read_log()` for reading Apache-style logs.\n\n## Loading Data\n\nThe most commonly used `read_csv()` has some familiar arguments like:\n\n- `skip` -- to specify the number of rows to skip (headers),\n- `col_names` -- to supply a vector of column names,\n- `comment` -- to specify what character designates a comment,\n- `na` -- to specify how missing values are represented.\n\n## Under the Hood -- `parse_*` Functions\n\nUnder the hood, data-reading functions use `parse_*` functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_double(\"42.24\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 42.24\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_number(\"272'555'849,55\", \n             locale = locale(decimal_mark = \",\", \n                             grouping_mark = \"'\"\n                            )\n             )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 272555850\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparse_number(c('100%', 'price: 500$', '21sek', '42F'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100 500  21  42\n```\n:::\n:::\n\n\n## Parsing Strings\n\n- Strings can be represented in different encodings:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext1 <- 'P√• en √∂ √§r en √•'\ntext2 <- 'Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntext1\ncharToRaw(text2)\nparse_character(text1, locale = locale(encoding = 'UTF-8'))\nguess_encoding(charToRaw(\"Test\"))\nguess_encoding(charToRaw(text2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"P√• en √∂ √§r en √•\"\n [1] 5a 61 c5 bc c3 b3 c5 82 c4 87 20 67 c4 99 c5 9b 6c c4 85 20 6a 61 c5 ba c5\n[26] 84\n[1] \"P√• en √∂ √§r en √•\"\n# A tibble: 1 √ó 2\n  encoding confidence\n  <chr>         <dbl>\n1 ASCII             1\n# A tibble: 2 √ó 2\n  encoding     confidence\n  <chr>             <dbl>\n1 UTF-8              1   \n2 windows-1252       0.24\n```\n:::\n:::\n\n\n## Parsing Factors\n\n- R is using factors to represent categorical variables. \n- Supply known levels to `parse_factor` so that it warns you when an unknown level is present in the data:\n\n::: {.cell}\n\n```{.r .cell-code}\nlandscapes <- c('mountains', 'swamps', 'seaside')\nparse_factor(c('mountains', 'plains', 'seaside', 'swamps'), \n             levels = landscapes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] mountains <NA>      seaside   swamps   \nattr(,\"problems\")\n# A tibble: 1 √ó 4\n    row   col expected           actual\n  <int> <int> <chr>              <chr> \n1     2    NA value in level set plains\nLevels: mountains swamps seaside\n```\n:::\n:::\n\n\n## Other Parsing Functions\n\n`parse_`\n\n- `vector`, `time`, `number`, `logical`, `integer`, `double`, `character`, `date`, `datetime`,\n- `guess`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nguess_parser(\"2018-06-11 09:00:00\")\nparse_guess(\"2018-06-11 09:00:00\")\n\nguess_parser(c(1, 2.3, \"23$\", \"54%\"))\nparse_guess(c(1, 2.3, \"23$\", \"54%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"datetime\"\n[1] \"2018-06-11 09:00:00 UTC\"\n[1] \"character\"\n[1] \"1\"   \"2.3\" \"23$\" \"54%\"\n```\n:::\n:::\n\n\n## Importing Data Using `readr`\n\nWhen reading and parsing a file, `readr` attempts to guess proper parser for each column by looking at the 1000 first rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntricky_dataset <- read_csv(readr_example('challenge.csv'))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2000 Columns: 2\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\ndbl  (1): x\ndate (1): y\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nOK, so there are some parsing failures. We can examine them more closely using `problems()` as suggested in the above output.\n\n## Looking at Problematic Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- problems(tricky_dataset)\np\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 √ó 5\n# ‚Ä¶ with 5 variables: row <int>, col <int>, expected <chr>, actual <chr>,\n#   file <chr>\n```\n:::\n:::\n\n\nOK, let's see which columns cause trouble:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np %$% table(col)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n< table of extent 0 >\n```\n:::\n:::\n\n\nLooks like the problem occurs only in the `y` column.\n\n## Fixing Problematic Columns\n\nSo, how can we fix the problematic columns?\n\nWe can explicitely tell what parser to use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntricky_dataset <- read_csv(readr_example('challenge.csv'),\n                           col_types = cols(x = col_double(),\n                                            y = col_character()\n                                            )\n                                                      )\ntricky_dataset %>% tail(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 2\n      x y         \n  <dbl> <chr>     \n1 0.164 2018-03-29\n2 0.472 2014-08-04\n3 0.718 2015-08-16\n4 0.270 2020-02-04\n5 0.608 2019-01-06\n```\n:::\n:::\n\n\nAs you can see, we can still do better by parsing the `y` column as *date*, not as *character*. \n\n## Fixing Problematic Columns cted.\n\nBut knowing that the **parser is guessed based on the first 1000 lines**, we can see what sits past the 1000-th line in the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntricky_dataset %>% head(n = 1002) %>% tail(n = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 √ó 2\n         x y         \n     <dbl> <chr>     \n1 4569     <NA>      \n2 4548     <NA>      \n3    0.238 2015-01-16\n4    0.412 2018-05-18\n```\n:::\n:::\n\n\nIt seems, we were very unlucky, because up till the 1000-th line there are only integers in the `x` column and `NA`s in the `y` column so the parser cannot be guessed correctly. To fix this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntricky_dataset <- read_csv(readr_example('challenge.csv'),\n                           guess_max = 1001)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2000 Columns: 2\n‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nDelimiter: \",\"\ndbl  (1): x\ndate (1): y\n\n‚Ñπ Use `spec()` to retrieve the full column specification for this data.\n‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Writing to a File\n\nThe `readr` package also provides functions useful for writing tibbled data into a file:\n\n- `write_csv()`\n- `write_tsv()`\n- `write_excel_csv()`\n\nThey **always** save:\n\n- Text in UTF-8,\n- Dates in ISO8601\n\nBut saving in csv (or tsv) does mean you loose information about the type of data in particular columns. You can avoid this by using:\n\n- `write_rds()` and `read_rds()` to read/write objects in R binary rds format,\n- Tse `write_feather()` and `read_feather()` from package `feather` to read/write objects in a fast binary format that other programming languages can access.\n\n## Basic Data Transformations with `dplyr`\n\nLet us create a tibble:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou <- as_tibble(diamonds) %>% head(n = 100)\nbijou\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 √ó 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ‚Ä¶ with 90 more rows\n```\n:::\n:::\n\n\n![](assets/diamonds.png){height=\"200px\" .center}\n\n## Picking Observations using `filter()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% filter(cut == 'Ideal' | cut == 'Premium', carat >= 0.23) %>%\n  head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 10\n  carat cut     color clarity depth table price     x     y     z\n  <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.29 Premium I     VS2      62.4    58   334  4.2   4.23  2.63\n3  0.23 Ideal   J     VS1      62.8    56   340  3.93  3.9   2.46\n4  0.31 Ideal   J     SI2      62.2    54   344  4.35  4.37  2.71\n5  0.32 Premium E     I1       60.9    58   345  4.38  4.42  2.68\n```\n:::\n:::\n\n\nBe careful with floating point comparisons! Also, rows with comparison resulting in `NA` are skipped by default!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% filter(near(0.23, carat) | is.na(carat)) %>%\n  head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n3  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n4  0.23 Ideal     J     VS1      62.8    56   340  3.93  3.9   2.46\n5  0.23 Very Good E     VS2      63.8    55   352  3.85  3.92  2.48\n```\n:::\n:::\n\n\n\n## Rearranging Observations using `arrange()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% arrange(cut, carat, desc(price))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 √ó 10\n   carat cut   color clarity depth table price     x     y     z\n   <dbl> <ord> <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.22 Fair  E     VS2      65.1    61   337  3.87  3.78  2.49\n 2  0.86 Fair  E     SI2      55.1    69  2757  6.45  6.33  3.52\n 3  0.96 Fair  F     SI2      66.3    62  2759  6.27  5.95  4.07\n 4  0.23 Good  F     VS1      58.2    59   402  4.06  4.08  2.37\n 5  0.23 Good  E     VS1      64.1    59   402  3.83  3.85  2.46\n 6  0.23 Good  E     VS1      56.9    65   327  4.05  4.07  2.31\n 7  0.26 Good  E     VVS1     57.9    60   554  4.22  4.25  2.45\n 8  0.26 Good  D     VS2      65.2    56   403  3.99  4.02  2.61\n 9  0.26 Good  D     VS1      58.4    63   403  4.19  4.24  2.46\n10  0.3  Good  H     SI1      63.7    57   554  4.28  4.26  2.72\n# ‚Ä¶ with 90 more rows\n```\n:::\n:::\n\n\nThe `NA`s always end up at the end of the rearranged tibble.\n\n## Selecting Variables with `select()`\n\nSimple `select` with a range:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% select(color, clarity, x:z) %>% head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 5\n  color clarity     x     y     z\n  <ord> <ord>   <dbl> <dbl> <dbl>\n1 E     SI2      3.95  3.98  2.43\n2 E     SI1      3.89  3.84  2.31\n3 E     VS1      4.05  4.07  2.31\n4 I     VS2      4.2   4.23  2.63\n5 J     SI2      4.34  4.35  2.75\n```\n:::\n:::\n\n\nExclusive `select`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% select(-(x:z)) %>% head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 7\n  carat cut     color clarity depth table price\n  <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int>\n1  0.23 Ideal   E     SI2      61.5    55   326\n2  0.21 Premium E     SI1      59.8    61   326\n3  0.23 Good    E     VS1      56.9    65   327\n4  0.29 Premium I     VS2      62.4    58   334\n5  0.31 Good    J     SI2      63.3    58   335\n```\n:::\n:::\n\n\n## Selecting Variables with `select()` cted.\n\n`rename` is a variant of `select`, here used with `everything()` to move `x` to the beginning and rename it to `var_x` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% rename(var_x = x) %>% head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 10\n  carat cut     color clarity depth table price var_x     y     z\n  <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal   E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good    E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good    J     SI2      63.3    58   335  4.34  4.35  2.75\n```\n:::\n:::\n\n\nuse `everything()` to bring some columns to the front:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% select(x:z, everything()) %>% head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 10\n      x     y     z carat cut     color clarity depth table price\n  <dbl> <dbl> <dbl> <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int>\n1  3.95  3.98  2.43  0.23 Ideal   E     SI2      61.5    55   326\n2  3.89  3.84  2.31  0.21 Premium E     SI1      59.8    61   326\n3  4.05  4.07  2.31  0.23 Good    E     VS1      56.9    65   327\n4  4.2   4.23  2.63  0.29 Premium I     VS2      62.4    58   334\n5  4.34  4.35  2.75  0.31 Good    J     SI2      63.3    58   335\n```\n:::\n:::\n\n\n## Create/alter new Variables with `mutate`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% mutate(p = x + z, q = p + y) %>% select(-(depth:price)) %>% head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 9\n  carat cut     color clarity     x     y     z     p     q\n  <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <dbl> <dbl> <dbl>\n1  0.23 Ideal   E     SI2      3.95  3.98  2.43  6.38  10.4\n2  0.21 Premium E     SI1      3.89  3.84  2.31  6.2   10.0\n3  0.23 Good    E     VS1      4.05  4.07  2.31  6.36  10.4\n4  0.29 Premium I     VS2      4.2   4.23  2.63  6.83  11.1\n5  0.31 Good    J     SI2      4.34  4.35  2.75  7.09  11.4\n```\n:::\n:::\n\n\n## Create/alter new Variables with `transmutate`\n\nOnly the transformed variables will be retained\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% transmute(carat, cut, sum = x + y + z) %>% head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 3\n  carat cut       sum\n  <dbl> <ord>   <dbl>\n1  0.23 Ideal    10.4\n2  0.21 Premium  10.0\n3  0.23 Good     10.4\n4  0.29 Premium  11.1\n5  0.31 Good     11.4\n```\n:::\n:::\n\n\n## Group and Summarize\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% group_by(cut) %>% summarize(max_price = max(price),\n                                      mean_price = mean(price),\n                                      min_price = min(price))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 4\n  cut       max_price mean_price min_price\n  <ord>         <int>      <dbl>     <int>\n1 Fair           2759      1951        337\n2 Good           2759       661.       327\n3 Very Good      2760       610.       336\n4 Premium        2760       569.       326\n5 Ideal          2757       693.       326\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% \n  group_by(cut, color) %>% \n  summarize(max_price = max(price), \n            mean_price = mean(price), \n            min_price = min(price)) %>% head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 5\n# Groups:   cut [2]\n  cut   color max_price mean_price min_price\n  <ord> <ord>     <int>      <dbl>     <int>\n1 Fair  E          2757      1547        337\n2 Fair  F          2759      2759       2759\n3 Good  D           403       403        403\n4 Good  E          2759      1010.       327\n5 Good  F          2759      1580.       402\n```\n:::\n:::\n\n\n## Other data manipulation tips\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% group_by(cut) %>% summarize(count = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 2\n  cut       count\n  <ord>     <int>\n1 Fair          3\n2 Good         18\n3 Very Good    38\n4 Premium      22\n5 Ideal        19\n```\n:::\n:::\n\n\n. . .\n\nWhen you need to regroup within the same pipe, use `ungroup()`.\n\n## The Concept of Tidy Data\n\nData are tidy *sensu Wickham* if:\n\n- Each and every observation is represented as exactly one row,\n- Each and every variable is represented by exactly one column,\n- Thus each data table cell contains only one value.\n\n![](assets/tidy_data.png)\n\nUsually data are untidy in only one way. However, if you are unlucky, they are really untidy and thus a pain to work with...\n\n## Tidy Data\n\n![](assets/tidy_data.png){height=\"120px\"}\n\n. . .\n\n[**Are these data tidy?**]{.center}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-responsive table-condensed\" style=\"width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> Sepal.Length </th>\n   <th style=\"text-align:center;\"> Sepal.Width </th>\n   <th style=\"text-align:center;\"> Petal.Length </th>\n   <th style=\"text-align:center;\"> Petal.Width </th>\n   <th style=\"text-align:center;\"> Species </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 5.1 </td>\n   <td style=\"text-align:center;\"> 3.5 </td>\n   <td style=\"text-align:center;\"> 1.4 </td>\n   <td style=\"text-align:center;\"> 0.2 </td>\n   <td style=\"text-align:center;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 4.9 </td>\n   <td style=\"text-align:center;\"> 3.0 </td>\n   <td style=\"text-align:center;\"> 1.4 </td>\n   <td style=\"text-align:center;\"> 0.2 </td>\n   <td style=\"text-align:center;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 4.7 </td>\n   <td style=\"text-align:center;\"> 3.2 </td>\n   <td style=\"text-align:center;\"> 1.3 </td>\n   <td style=\"text-align:center;\"> 0.2 </td>\n   <td style=\"text-align:center;\"> setosa </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-responsive table-condensed\" style=\"width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> Species </th>\n   <th style=\"text-align:center;\"> variable </th>\n   <th style=\"text-align:center;\"> value </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> setosa </td>\n   <td style=\"text-align:center;\"> Sepal.Length </td>\n   <td style=\"text-align:center;\"> 5.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> setosa </td>\n   <td style=\"text-align:center;\"> Sepal.Length </td>\n   <td style=\"text-align:center;\"> 4.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> setosa </td>\n   <td style=\"text-align:center;\"> Sepal.Length </td>\n   <td style=\"text-align:center;\"> 4.7 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Tidy Data\n\n![](assets/tidy_data.png){height=\"120px\"}\n\n[**Are these data tidy?**]{.center}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-responsive table-condensed\" style=\"width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> Sepal.L.W </th>\n   <th style=\"text-align:center;\"> Petal.L.W </th>\n   <th style=\"text-align:center;\"> Species </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 5.1/3.5 </td>\n   <td style=\"text-align:center;\"> 1.4/0.2 </td>\n   <td style=\"text-align:center;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 4.9/3 </td>\n   <td style=\"text-align:center;\"> 1.4/0.2 </td>\n   <td style=\"text-align:center;\"> setosa </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 4.7/3.2 </td>\n   <td style=\"text-align:center;\"> 1.3/0.2 </td>\n   <td style=\"text-align:center;\"> setosa </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-responsive table-condensed\" style=\"width: auto !important; \">\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Sepal.Length </td>\n   <td style=\"text-align:center;\"> 5.1 </td>\n   <td style=\"text-align:center;\"> 4.9 </td>\n   <td style=\"text-align:center;\"> 4.7 </td>\n   <td style=\"text-align:center;\"> 4.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Sepal.Width </td>\n   <td style=\"text-align:center;\"> 3.5 </td>\n   <td style=\"text-align:center;\"> 3.0 </td>\n   <td style=\"text-align:center;\"> 3.2 </td>\n   <td style=\"text-align:center;\"> 3.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Petal.Length </td>\n   <td style=\"text-align:center;\"> 1.4 </td>\n   <td style=\"text-align:center;\"> 1.4 </td>\n   <td style=\"text-align:center;\"> 1.3 </td>\n   <td style=\"text-align:center;\"> 1.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Petal.Width </td>\n   <td style=\"text-align:center;\"> 0.2 </td>\n   <td style=\"text-align:center;\"> 0.2 </td>\n   <td style=\"text-align:center;\"> 0.2 </td>\n   <td style=\"text-align:center;\"> 0.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Species </td>\n   <td style=\"text-align:center;\"> setosa </td>\n   <td style=\"text-align:center;\"> setosa </td>\n   <td style=\"text-align:center;\"> setosa </td>\n   <td style=\"text-align:center;\"> setosa </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Tidying Data with `pivot_longer`\n\nIf some of your column names are actually values of a variable, use `pivot_longer` (old `gather`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou2 %>% head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 3\n  cut     `2008` `2009`\n  <ord>    <int>  <dbl>\n1 Ideal      326    332\n2 Premium    326    332\n3 Good       327    333\n4 Premium    334    340\n5 Good       335    341\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou2 %>% \n  pivot_longer(cols = c(`2008`, `2009`), names_to = 'year', values_to = 'price') %>% \n  head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 3\n  cut     year  price\n  <ord>   <chr> <dbl>\n1 Ideal   2008    326\n2 Ideal   2009    332\n3 Premium 2008    326\n4 Premium 2009    332\n5 Good    2008    327\n```\n:::\n:::\n\n\n## Tidying Data with `pivot_wider`\n\nIf some of your observations are scattered across many rows, use `pivot_wider` (old `spread`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 √ó 5\n  cut     price clarity dimension measurement\n  <ord>   <int> <ord>   <chr>           <dbl>\n1 Ideal     326 SI2     x                3.95\n2 Premium   326 SI1     x                3.89\n3 Good      327 VS1     x                4.05\n4 Ideal     326 SI2     y                3.98\n5 Premium   326 SI1     y                3.84\n6 Good      327 VS1     y                4.07\n7 Ideal     326 SI2     z                2.43\n8 Premium   326 SI1     z                2.31\n9 Good      327 VS1     z                2.31\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou3 %>% \n  pivot_wider(names_from = dimension, values_from = measurement) %>% \n  head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 6\n  cut     price clarity     x     y     z\n  <ord>   <int> <ord>   <dbl> <dbl> <dbl>\n1 Ideal     326 SI2      3.95  3.98  2.43\n2 Premium   326 SI1      3.89  3.84  2.31\n3 Good      327 VS1      4.05  4.07  2.31\n```\n:::\n:::\n\n\n## Tidying Data with `separate`\n\nIf some of your columns contain more than one value, use `separate`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 4\n  cut     price clarity dim           \n  <ord>   <int> <ord>   <chr>         \n1 Ideal     326 SI2     3.95/3.98/2.43\n2 Premium   326 SI1     3.89/3.84/2.31\n3 Good      327 VS1     4.05/4.07/2.31\n4 Premium   334 VS2     4.2/4.23/2.63 \n5 Good      335 SI2     4.34/4.35/2.75\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou4 %>% \n  separate(dim, into = c(\"x\", \"y\", \"z\"), sep = \"/\", convert = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 6\n  cut     price clarity     x     y     z\n  <ord>   <int> <ord>   <dbl> <dbl> <dbl>\n1 Ideal     326 SI2      3.95  3.98  2.43\n2 Premium   326 SI1      3.89  3.84  2.31\n3 Good      327 VS1      4.05  4.07  2.31\n4 Premium   334 VS2      4.2   4.23  2.63\n5 Good      335 SI2      4.34  4.35  2.75\n```\n:::\n:::\n\n\n## Tidying Data with `unite`\n\nIf some of your columns contain more than one value, use `separate`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 7\n  cut     price clarity_prefix clarity_suffix     x     y     z\n  <ord>   <int> <chr>          <chr>          <dbl> <dbl> <dbl>\n1 Ideal     326 SI             2               3.95  3.98  2.43\n2 Premium   326 SI             1               3.89  3.84  2.31\n3 Good      327 VS             1               4.05  4.07  2.31\n4 Premium   334 VS             2               4.2   4.23  2.63\n5 Good      335 SI             2               4.34  4.35  2.75\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou5 %>% unite(clarity, clarity_prefix, clarity_suffix, sep='')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 6\n  cut     price clarity     x     y     z\n  <ord>   <int> <chr>   <dbl> <dbl> <dbl>\n1 Ideal     326 SI2      3.95  3.98  2.43\n2 Premium   326 SI1      3.89  3.84  2.31\n3 Good      327 VS1      4.05  4.07  2.31\n4 Premium   334 VS2      4.2   4.23  2.63\n5 Good      335 SI2      4.34  4.35  2.75\n```\n:::\n:::\n\n\n**Note:** that `sep` is here interpreted as the position to split on. It can also be a *regular expression* or a delimiting string/character. Pretty flexible approach!\n\n## Completing Missing Values Using `complete`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbijou %>% head(n = 10) %>% \n  select(cut, clarity, price) %>% \n  mutate(continent = sample(c('AusOce', 'Eur'), \n                            size = 10, \n                            replace = T)) -> missing_stones\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_stones %>% complete(cut, continent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 √ó 4\n   cut       continent clarity price\n   <ord>     <chr>     <ord>   <int>\n 1 Fair      AusOce    VS2       337\n 2 Fair      Eur       <NA>       NA\n 3 Good      AusOce    SI2       335\n 4 Good      Eur       VS1       327\n 5 Very Good AusOce    <NA>       NA\n 6 Very Good Eur       VVS2      336\n 7 Very Good Eur       VVS1      336\n 8 Very Good Eur       SI1       337\n 9 Very Good Eur       VS1       338\n10 Premium   AusOce    SI1       326\n11 Premium   Eur       VS2       334\n12 Ideal     AusOce    SI2       326\n13 Ideal     Eur       <NA>       NA\n```\n:::\n:::\n\n\n## Combining Datasets\n\nOften, we need to combine a number of data tables (relational data) to get the full picture of the data. Here different types of *joins* come to help:\n\n. . .\n\n- *mutating joins* that add new variables to data table `A` based on matching observations (rows) from data table `B`\n\n. . .\n\n- *filtering joins* that filter observations from data table `A` based on whether they match observations in data table `B`\n\n. . .\n\n- *set operations* that treat observations in `A` and `B` as elements of a set.\n\n. . .\n\nLet us create two example tibbles that share a key:\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> key </th>\n   <th style=\"text-align:left;\"> x </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> A1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> A2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> A3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> e </td>\n   <td style=\"text-align:left;\"> A4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> key </th>\n   <th style=\"text-align:left;\"> y </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> B1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> B3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> d </td>\n   <td style=\"text-align:left;\"> B4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::::\n\n## The Joins Family &mdash; `inner_join`\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> key </th>\n   <th style=\"text-align:left;\"> x </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> A1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> A2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> A3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> e </td>\n   <td style=\"text-align:left;\"> A4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> key </th>\n   <th style=\"text-align:left;\"> y </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> B1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> B3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> d </td>\n   <td style=\"text-align:left;\"> B4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::::\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA %>% inner_join(B, by = 'key')\n# All non-matching rows are dropped!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 3\n  key   x     y    \n  <chr> <chr> <chr>\n1 a     A1    B1   \n2 b     A2    <NA> \n3 c     A3    B3   \n```\n:::\n:::\n\n\n## The Joins Family &mdash; `left_join`\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> key </th>\n   <th style=\"text-align:left;\"> x </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> A1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> A2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> A3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> e </td>\n   <td style=\"text-align:left;\"> A4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> key </th>\n   <th style=\"text-align:left;\"> y </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> B1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> B3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> d </td>\n   <td style=\"text-align:left;\"> B4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::::\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA %>% left_join(B, by = 'key')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 √ó 3\n  key   x     y    \n  <chr> <chr> <chr>\n1 a     A1    B1   \n2 b     A2    <NA> \n3 c     A3    B3   \n4 e     A4    <NA> \n```\n:::\n:::\n\n\n## The Joins Family &mdash; `right_join`\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> key </th>\n   <th style=\"text-align:left;\"> x </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> A1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> A2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> A3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> e </td>\n   <td style=\"text-align:left;\"> A4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> key </th>\n   <th style=\"text-align:left;\"> y </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> B1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> B3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> d </td>\n   <td style=\"text-align:left;\"> B4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::::\n\n. . .\n \n\n::: {.cell}\n\n```{.r .cell-code}\nA %>% right_join(B, by = 'key')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 √ó 3\n  key   x     y    \n  <chr> <chr> <chr>\n1 a     A1    B1   \n2 b     A2    <NA> \n3 c     A3    B3   \n4 d     <NA>  B4   \n```\n:::\n:::\n\n\n\n## The Joins Family &mdash; `full_join`\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> key </th>\n   <th style=\"text-align:left;\"> x </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> A1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> A2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> A3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> e </td>\n   <td style=\"text-align:left;\"> A4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> key </th>\n   <th style=\"text-align:left;\"> y </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> B1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> NA </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> B3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> d </td>\n   <td style=\"text-align:left;\"> B4 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n:::\n::::\n\n. . .\n \n\n::: {.cell}\n\n```{.r .cell-code}\nA %>% full_join(B, by = 'key')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 √ó 3\n  key   x     y    \n  <chr> <chr> <chr>\n1 a     A1    B1   \n2 b     A2    <NA> \n3 c     A3    B3   \n4 e     A4    <NA> \n5 d     <NA>  B4   \n```\n:::\n:::\n\n\n## Some Other Friends\n\n- `stringr` for string manipulation and regular expressions\n- `forcats` for working with factors\n- `lubridate` for working with dates\n\n## {background-image=\"../../assets/images/cover.jpg\"}\n\n### Thank you! Questions?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n         _                     \nplatform x86_64-conda-linux-gnu\nos       linux-gnu             \nmajor    4                     \nminor    2.2                   \n```\n:::\n:::\n\n\n[2023 ‚Ä¢ [SciLifeLab](https://www.scilifelab.se/) ‚Ä¢ [NBIS](https://nbis.se/) ‚Ä¢ [RaukR](https://nbisweden.github.io/workshop-RaukR-2306/)]{.smaller}\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}