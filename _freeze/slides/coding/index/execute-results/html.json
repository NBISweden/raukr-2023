{
  "hash": "a93db3c4be3d12ef1d8fa16bf50aaa4d",
  "result": {
    "markdown": "---\ntitle: \"Best Coding Practises\"\nauthor: \"Marcin Kierczak\"\nimage: \"assets/featured.jpg\"\nformat: revealjs\n---\n\n\n##  {visibility=\"hidden\"}\n\n\n::: {.cell}\n\n:::\n\n\n## Learning Outcomes\n\n<br>\n\nAfter this module:\n\n- You will be aware of different coding styles\n\n. . .\n\n- You will know what styles are good ü¶∏ and bad ü¶π and why ‚ùì\n\n. . .\n\n- You will know how to decompose a problem before you even start coding\n\n. . .\n\n- You will understand when there is time for writing a function\n\n. . .\n\n- Your code will reach new level of awesomeness! üÜí\n\n## Topics of This Presentation\n\n<br>\n\n- **Style** &mdash; _howTo_style.yourCode?\n\n- **Structure** &mdash; how to think ü§î about the code and manufacture your own building üöß blocks\n\n. . .\n\n- **Debugging** &mdash; my code does not run üòû\n\n- **Profiling** &mdash; now it does run but... out of memory üí£\n\n- **Optimization** &mdash; making things better üë®‚Äçüè≠\n\n. . .\n\n- **Vectorization** &mdash; more details on optimization via vectorization üîù\n\n- **Parallelization** &mdash; run things in parallel, rule them all! üíç\n\n## What is Coding Style?\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n- Naming conventions --- assigning names to variables\n\n- Code formatting --- placement of braces, use of white space characters etc.\n:::\n\n::: {.column width=\"50%\"}\n\n![[From: [Behind The Lines](http://geekandpoke.typepad.com/geekandpoke/2010/09/behind-the-lines.html) 2010-09-23. By Oliver Widder, Webcomics Geek And Poke.]{.smaller}](assets/coding_style.jpg){.left height=\"600px\"}\n:::\n::::\n\n## Naming Conventions\n\nA syntactically valid name:\n\n- Consists of:\n  - letters: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n  - digits: 0123456789\n  - period: `.`\n  - underscore: `_`\n\n- Begins with a letter or the period (`.`) **not** followed by a number\n\n- Cannot be one of the *reserved words*: `if`, `else`, `repeat`, `while`, `function`, `for`, `in`, `next`, `break`, `TRUE`, `FALSE`, `NULL`, `Inf`, `NaN`, `NA`, `NA_integer_`, `NA_real_`, `NA_complex_`, `NA_character_`\n\n- Also cannot be: `c`, `q`, `t`, `C`, `D`, `I` as they are reserved function names.\n\n## Naming Style\n\nVariable names that are legal are not necessarily a good style and they may be dangerous üíÄ:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF\nT\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nF + T  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nF <- 3  \nF + T  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n\n\ndo not do this!\n\n. . .\n\nunless you are a politician üï¥...\n\n[Avoid `T` and `F` as variable names.]{.large}\n\n## Customary Variable Names\n\n:::: {.columns}\n::: {.column}\n\nAlso, there is a number of variable names that are traditionally used to name particular variables:\n\n- `usr` &mdash; user\n- `pwd` &mdash; password\n- `x`, `y`, `z` &mdash; vectors\n- `w` &mdash; weights\n- `f`, `g` &mdash; functions\n- `n` &mdash; number of rows\n- `p` &mdash; number of columns\n- `i`, `j`, `k` &mdash; indexes\n- `df` &mdash; data frame\n- `cnt` &mdash; counter\n- `M`, `N`, `W` &mdash; matrices\n- `tmp` &mdash; temporary variables\n\n:::\n\n::: {.column}\n\nSometimes these are domain-specific:\n\n- `p`, `q` &mdash; allele frequencies in genetics,\n- `N`, `k` &mdash; number of trials and number of successes in stats\n\n[Try to avoid using these in this way to avoid possible confusion.]{.large}\n\n:::\n:::\n\n## Different Notations\n\nPeople use different notation styles throughout their code:\n\n. . .\n\n- `snake_notation_looks_like_this`\n\n. . .\n\n- `camelNotationLooksLikeThis`\n\n. . .\n\n- `period.notation.looks.like.this`\n\n. . .\n\nBut many also use...\n\n. . .\n\n- `LousyNotation_looks.likeThis`\n\n. . .\n\nTry to be consistent and stick to one of them. Bear in mind `period.notation` is used by S3 classes to create generic functions, e.g. `plot.my.object`. A good-enough reason to avoid it?\n\n. . .\n\nIt is also important to maintain code readability by having your variable names:\n\n- informative, e.g. `genotypes` vs. `fsjht45jkhsdf4`\n\n. . .\n\n- Consistent across your code &mdash; the same naming convention\n\n. . .\n\n- Not too long, e.g. `weight` vs. `phenotype.weight.measured`\n\n. . .\n\n- In the period notation and the snake notation avoid `my.var.2` or `my_var_2`, use `my.var2` and `my_var2` instead\n\n## Special Variable Names\n\nFew more things to consider:\n\n- There are built-in variable names:\n\n  - `LETTERS`: the 26 upper-case letters of the Roman alphabet\n  - `letters`: the 26 lower-case letters of the Roman alphabet\n  - `month.abb`: the three-letter abbreviations for the English month names\n  - `month.name`: the English names for the months of the year\n  - `pi`: the ratio of the circumference of a circle to its diameter\n\n- Variable names beginning with period are **hidden**: `.my_secret_variable` üëª will not be shown but can be accessed\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.the_hidden_answer <- 42\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"F\" \"T\"\n```\n:::\n:::\n\n\n. . .\n\nbut with a bit of effort you can see them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls(all.names = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \".First\"             \".Last\"              \".main\"             \n[4] \".Random.seed\"       \".the_hidden_answer\" \"F\"                 \n[7] \"T\"                 \n```\n:::\n:::\n\n\n## Structure Your Code\n\nDecompose the problem üß© üß©!\n\n[\n  ![](assets/Philip-ii-of-macedon.jpg){height=\"200px\"}\n  ![](assets/Julius_Ceasar.jpg){height=\"200px\"}\n  ![](assets/Napoleon_Bonaparte.jpg){height=\"200px\"}  \n  [source: Wikimedia Commons]{.smaller}  \n]{.center}\n\n. . .\n\n- *divide et impera* / top-down approach &mdash; split your BIG problem into a number of small sub-problems recursively and, **at some level**, encapsulate your code in functional blocks (functions)\n\n- a function should be performing a small task, it should be a logical program unit\n\n**when should I write a function ‚ùì**\n\n- one screen üíª rule (resolution...),\n- re-use twice rule of üëç.\n\nconsider creating an S4 or even an R6 class &mdash; data-type safety!\n\n## How to write functions\n\n- avoid accessing and modifying globals\n  - avoid üö≥ `a <<- 42`\n  - and üÜó use a closure instead\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_counter <- function() {\n  i <- 0\n  function() {\n    # do something useful, then ...\n    i <<- i + 1\n    i\n  }\n}\n\ncounter1 <- new_counter()\ncounter2 <- new_counter()\ncounter1()\ncounter1()\ncounter2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 1\n```\n:::\n:::\n\n\n[based on Stackoverflow [answer](https://stackoverflow.com/questions/2628621/how-do-you-use-scoping-assignment-in-r)]{.smaller}\n\n## How to write functions\n\n- use **data** as the **very first** argument for `%>%` pipes sake:\n  - `myfun <- function(x, arg)` üÜó\n  - `myfun <- function(arg, x)` üôÖ\n\n. . .\n\n- set arguments to defaults &mdash; better too many args than too few:\n  - `myfun <- function(x, seed = 42)` üÜó\n  - `myfun <- function(x, ...)` ‚õî\n\n. . .\n\n- remember that global defaults can be changed by `options`\n\n. . .\n\n- if you are re-using functions written by someone else &mdash; write a wrapper function around them\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_awesome_plot <- function(...) {\n  plot(..., col='red', pch=19, cex.axis=.7, las=1)\n}\nmy_awesome_plot(1:5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/wrapper-fn-1.png){width=384}\n:::\n:::\n\n\n## How to write functions\n\n- showing progress and messages is good, but let the others turn this functionality off\n\n. . .\n\n- if you are calling other functions, consider using `...`\n\n<br><br>\n\n. . .\n\n[\n![](assets/goto.png){height=\"300px\"}\n<br>\n[source: http://www.xkcd/com/292]{.smaller}\n]{.center}\n\n## {background-image=\"../../assets/images/cover.jpg\"}\n\n### Thank you! Questions?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n         _                     \nplatform x86_64-conda-linux-gnu\nos       linux-gnu             \nmajor    4                     \nminor    2.2                   \n```\n:::\n:::\n\n\n[2023 ‚Ä¢ [SciLifeLab](https://www.scilifelab.se/) ‚Ä¢ [NBIS](https://nbis.se/) ‚Ä¢ [RaukR](https://nbisweden.github.io/workshop-RaukR-2306/)]{.smaller}",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}