{
  "hash": "6ec6dcf665a22be7b93cd331800026bf",
  "result": {
    "markdown": "---\ntitle: \"git and R\"\nauthor: \"Sebastian DiLorenzo\"\nimage: \"assets/featured.jpg\"\nformat: revealjs\n---\n\n\n## Overview\n\n\n::: {.cell}\n\n:::\n\n\n:::: {.columns}\n::: {.column width=\"60%\"}\n- What is git and why should I use it?\n- git set-up\n- git for yourself\n- git and Rstudio\n- git with github and collaborators\n- github actions\n:::\n\n::: {.column width=\"40%\"}\n![](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png){width=\"300px\"}\n![](https://git-scm.com/images/logos/downloads/Git-Icon-1788C.png){width=\"300px\"}\n:::\n::::\n\n## What is git and why should I use it?\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n![](assets/tree.png){width=\"80%\"}\n:::\n\n::: {.column width=\"50%\"}\n\n<br>\n\n- Track changes\n- Revert changes\n- Reproducibility\n- Backups\n- Working with others\n:::\n:::: \n\n::: notes\nBasically, say you have a folder with a bunch of files. And you want to track what changes you have made to every file, kind of like a word or google slide document with track changes. As you are tracking these changes you also have the possibility to revert these changes and go back in time to an earlier state of the files.\n\nWhy would you want to do this? It is very useful for working reproducibly to have a complete log of what you have done, it is good for backup, especially if you are also connecting and synchronizing your collection of files with some service such as github, more on that later. It is also very good when you want to work with others in a highly structured way, making sure that many people can work on the same thing without messing it up. \n\nThere are other advantages of course but I do not want to overload you, so in this lecture we will be focusing on basic git usage and there are loads of online resources to take you further than that.\n:::\n\n## What is git and why should I use it?\n\n<br>\n\n#### Version control\n> In software development, version control is a class of systems responsible for managing changes to computer programs or other collections of information such that revisions have a logical and consistent organization.\n>\n> https://en.wikipedia.org/wiki/Comparison_of_version-control_software\n\n<br>\n\n#### Repository\n> A collection of files under version control.\n\n\n\n::: notes\nGit is version control system, tracking changes for all files in a repository.\nThis is not the only way to get version control of your files.\n:::\n\n## git set-up\n<br>\n\n#### Checking configuration\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_sitrep()\n```\n:::\n\n\n::: notes\nBefore the course started you received an email that asked you to have a github account and git available on commandline. Since this is an R focused course we will use Rstudio to check, and in some cases set, some of your configurations.\n\nYou do not have to do this in R or Rstudio, you can also do this with other git commands from terminal.\n\nTo do this we will use the usethis library. git_sitrep() is a great tool for checking what configurations you have set.\n\n**Demo git_sitrep**\n:::\n\n## git set-up\n<br>\n\n#### Checking configuration\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-4,8,10-15\"}\nusethis::git_sitrep()\nGit config (global)\n• Name: 'Sebastian-D'\n• Email: 'dilorenzo.sebastian@gmail.com'\n• Global (user-level) gitignore file: <unset>\n• Vaccinated: FALSE\nℹ See `?git_vaccinate` to learn more\n• Default Git protocol: 'https'\n• Default initial branch name: <unset>\nGitHub\n• Default GitHub host: 'https://github.com'\n• Personal access token for 'https://github.com': '<discovered>'\n• GitHub user: 'Sebastian-D'\n• Token scopes: 'repo, user, workflow'\n• Email(s): 'dilorenzo.sebastian@gmail.com (primary)', 'sebastian.dilorenzo@scilifelab.uu.se'\nGit repo for current project\n• Active usethis project: '/Users/sd/Library/CloudStorage/Box-Box/Work/NBIS_CommMan'\nℹ Active project is not a Git repo\n```\n:::\n\n\n::: notes\nLooking at the information here we lets forcus on that our git global config has a name, which should be the same as the github username, an email associated with both my local git and my github, you can see your default protocol which is usually https unless you have some great reason for having SSH.\n\nIn the github section we can also see that we have a personal access token or PAT, and that token has certain scopes related to it. I will get back to this in a moment.\n:::\n\n## git set-up\n<br>\n\n#### Setting global configuration\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.com\")\n```\n:::\n\n\n\n::: notes\nuse_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.com\")\n\nIf you want to use commandline:\ngit config --global --list\ngit config --global user.name 'Jane Doe'\ngit config --global user.email 'jane@example.com'\n:::\n\n## git set-up\n<br>\n\n#### Personal Access Token (PAT)\n\n- Credentials\n- Scope\n    - \"What is this PAT allowed to modify?\"\n- No password prompt when uploading/downloading data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Takes you to github.com create new token.\nusethis::create_github_token()\n\n#Use to set your new token in your configuration\ngitcreds::gitcreds_set()\n```\n:::\n\n\n::: notes\nWhen we interact with a remote Git server, such as GitHub, we have to include credentials in the request. This proves we are a specific GitHub user, who’s allowed to do whatever we’re asking to do. What we are allowed to do with a certain PAT is the **scope** of the PAT.\n\n**DEMO create_github_token**\n\nOnce we have created our token we can save it in a password manager if you are using that. Then set it with our configuration with gitcreds_set(). Let's do this now, then check out gitcreds_sitrep().\n\nusethis::create_github_token()\ngitcreds::gitcreds_set()\ncredentials::set_github_pat(\"my_pat\")\n:::\n\n## git for yourself\n\n![](assets/git_text.png){height=\"400px\"}\n\n::: notes\nNow that we hopefully are all set-up, lets finally take a look at actually working with git. As a user, git is a folder and collection of files on your computer that you have initiated git version control on. A repository. \n\nTo revert:\ngit reset HEAD~\n:::\n\n## git for yourself\n\n![](assets/git_text.png){height=\"400px\"}\n\nWorkflow:\n\n- Make some changes.\n\n. . .\n\n- `git add` the new or changed files.\n\n. . .\n\n- `git commit` the current state of repository.\n\n::: notes\nAs you make changes to the files you can save the current state of the files. This is called a **commit**. You can and should give the commit some message describing what you have done. \"Fixed bug A\", \"Created function B\", \"Added a bunch of new images\". It is these commits then that you can revert to as necessary.\n**DEMO RSTUDIO**\n::: \n\n## git for yourself\n\n![](assets/git_text.png){height=\"400px\"}\n\nUseful commands:\n\n- `git status` lists changes in your repository.\n\n. . .\n\n- `git diff` shows the difference between a file and its last commit state.\n\n. . .\n\n- `git reset` go to a previous commit state.\n\n::: notes\ngit status\ngit reset HEAD~\n::: \n\n::: notes\ndiff\n\nlater, push/pull with github.\nclone\n\nGit and Rstudio:\nClone a repo using rstudio File > New Project > Version Control > Git\n\nConnect existing code to new github repo:\nusethis::use_git()\nusethis::use_github()\n\nMention branches?\nMention merge conflicts?\nMention remotes? Maybe \"What is a remote and why is it useful\", and then do the \"how\" in lab? Could just teach them the github way of sync instead... easier.\nmention github actions, what it does, but not how to set it up? Maybe add as advanced topic for lab.\nGit clients. Mentioned here but not taught.\n:::\n\n## Project setup\n\n::: notes\n1. Create a folder.\n2. Make it a Rstudio project.\n3. Make it a git repository\n4. Connect it to github\n:::\n\n## Github\n\n::: notes\nGithub is the hosting service that allows for syncing your work with other people, in private work groups or in open access collaboration.\nThe nice thing about having work on github is also that if something really breaks in your local git repo you can always delete it and download a fresh copy off github.\n\nBy pushing to GitHub, you make your work and all your accumulated progress accessible to others.\n:::\n\n##  {background-image=\"../../assets/images/cover.jpg\"}\n\n### Thank you! Questions?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n         _                     \nplatform aarch64-apple-darwin20\nos       darwin20              \nmajor    4                     \nminor    2.2                   \n```\n:::\n:::\n\n\n[2023 • [SciLifeLab](https://www.scilifelab.se/) • [NBIS](https://nbis.se/) • [RaukR](https://nbisweden.github.io/workshop-RaukR-2306/)]{.smaller}",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}