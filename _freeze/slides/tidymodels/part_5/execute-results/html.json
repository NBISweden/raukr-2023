{
  "hash": "f28812d5bcedd43a9c4502703f7fa3e4",
  "result": {
    "markdown": "---\ntitle: \"tidymodels - Feature engineering\"\nauthor: \"Max Kuhn\"\nimage: \"images/featured.png\"\nformat:\n  revealjs:\n    slide-number: true\n    code-line-numbers: true\n    footer: <https://nbisweden.github.io/raukr-2023>\n    include-before-body: styles/header.html\n    include-after-body: styles/footer-annotations.html\n    theme: [default, styles/tidymodels.scss]\n    width: 1280\n    height: 720\nknitr:\n  opts_chunk:\n    echo: true\n    collapse: true\n    comment: \"#>\"\n    fig.align: \"center\"\n\nfig-format: svg\n---\n\n\n\n## Previously...\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(doParallel)\n\ntidymodels_prefer()\ntheme_set(theme_bw())\noptions(pillar.advice = FALSE, pillar.min_title_chars = Inf)\ncl <- makePSOCKcluster(parallel::detectCores(logical = FALSE))\nregisterDoParallel(cl)\n\ndata(cells, package = \"modeldata\")\ncells$case <- NULL\n\nset.seed(123)\ncell_split <- initial_split(cells, prop = 0.8, strata = class)\ncell_tr <- training(cell_split)\ncell_te <- testing(cell_split)\n\nset.seed(123)\ncell_rs <- vfold_cv(cell_tr, v = 10, strata = class)\n\ncls_metrics <- metric_set(brier_class, roc_auc, kap)\n```\n:::\n\n\n\n\n## Working with our predictors\n\nWe might want to modify our predictors columns for a few reasons: \n\n::: {.incremental}\n- The model requires them in a different format (e.g. dummy variables for `lm()`).\n- The model needs certain data qualities (e.g. same units for K-NN).\n- The outcome is better predicted when one or more columns are transformed in some way (a.k.a \"feature engineering\"). \n:::\n\n. . .\n\nThe first two reasons are fairly predictable ([next page](https://www.tmwr.org/pre-proc-table.html#tab:preprocessing)).\n\nThe last one depends on your modeling problem. \n\n\n##  {background-iframe=\"https://www.tmwr.org/pre-proc-table.html#tab:preprocessing\"}\n\n::: footer\n:::\n\n\n## What is feature engineering?\n\nThink of a feature as some *representation* of a predictor that will be used in a model.\n\n. . .\n\nExample representations:\n\n-   Interactions\n-   Polynomial expansions/splines\n-   PCA feature extraction\n\nThere are a lot of examples in [_Feature Engineering and Selection_](https://bookdown.org/max/FES/).\n\n\n\n## Example: Dates\n\nHow can we represent date columns for our model?\n\n. . .\n\nWhen a date column is used in its native format, it is usually converted by an R model to an integer.\n\n. . .\n\nIt can be re-engineered as:\n\n-   Days since a reference date\n-   Day of the week\n-   Month\n-   Year\n-   Indicators for holidays\n\n::: notes\nThe main point is that we try to maximize performance with different versions of the predictors. \n\nMention that, for the Chicago data, the day or the week features are usually the most important ones in the model.\n:::\n\n## General definitions \n\n-   *Data preprocessing* steps allow your model to fit.\n\n-   *Feature engineering* steps help the model do the least work to predict the outcome as well as possible.\n\nThe recipes package can handle both!\n\nIn a little bit, we'll see successful (and unsuccessful) feature engineering methods for our example data. \n\n\n::: notes\nThese terms are often used interchangeably in the ML community but we want to distinguish them.\n:::\n\n\n## Prepare your data for modeling\n\n- The recipes package is an extensible framework for pipeable sequences of feature engineering steps that provide preprocessing tools to be applied to data.\n\n. . .\n\n- Statistical parameters for the steps can be _estimated_ from an initial data set and then _applied_ to other data sets.\n\n. . .\n\n- The resulting processed output can be used as inputs for statistical or machine learning models.\n\n## A first recipe \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncell_rec <- \n  recipe(class ~ ., data = cell_tr) \n```\n:::\n\n\n\n. . .\n\n- The `recipe()` function assigns columns to roles of \"outcome\" or \"predictor\" using the formula\n\n## A first recipe \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(cell_rec)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|variable                     |type                          |role      |source   |\n|:----------------------------|:-----------------------------|:---------|:--------|\n|angle_ch_1                   |double , numeric              |predictor |original |\n|area_ch_1                    |integer, numeric              |predictor |original |\n|avg_inten_ch_1               |double , numeric              |predictor |original |\n|avg_inten_ch_2               |double , numeric              |predictor |original |\n|avg_inten_ch_3               |double , numeric              |predictor |original |\n|avg_inten_ch_4               |double , numeric              |predictor |original |\n|convex_hull_area_ratio_ch_1  |double , numeric              |predictor |original |\n|convex_hull_perim_ratio_ch_1 |double , numeric              |predictor |original |\n|diff_inten_density_ch_1      |double , numeric              |predictor |original |\n|diff_inten_density_ch_3      |double , numeric              |predictor |original |\n|diff_inten_density_ch_4      |double , numeric              |predictor |original |\n|entropy_inten_ch_1           |double , numeric              |predictor |original |\n|entropy_inten_ch_3           |double , numeric              |predictor |original |\n|entropy_inten_ch_4           |double , numeric              |predictor |original |\n|eq_circ_diam_ch_1            |double , numeric              |predictor |original |\n|eq_ellipse_lwr_ch_1          |double , numeric              |predictor |original |\n|eq_ellipse_oblate_vol_ch_1   |double , numeric              |predictor |original |\n|eq_ellipse_prolate_vol_ch_1  |double , numeric              |predictor |original |\n|eq_sphere_area_ch_1          |double , numeric              |predictor |original |\n|eq_sphere_vol_ch_1           |double , numeric              |predictor |original |\n|fiber_align_2_ch_3           |double , numeric              |predictor |original |\n|fiber_align_2_ch_4           |double , numeric              |predictor |original |\n|fiber_length_ch_1            |double , numeric              |predictor |original |\n|fiber_width_ch_1             |double , numeric              |predictor |original |\n|inten_cooc_asm_ch_3          |double , numeric              |predictor |original |\n|inten_cooc_asm_ch_4          |double , numeric              |predictor |original |\n|inten_cooc_contrast_ch_3     |double , numeric              |predictor |original |\n|inten_cooc_contrast_ch_4     |double , numeric              |predictor |original |\n|inten_cooc_entropy_ch_3      |double , numeric              |predictor |original |\n|inten_cooc_entropy_ch_4      |double , numeric              |predictor |original |\n|inten_cooc_max_ch_3          |double , numeric              |predictor |original |\n|inten_cooc_max_ch_4          |double , numeric              |predictor |original |\n|kurt_inten_ch_1              |double , numeric              |predictor |original |\n|kurt_inten_ch_3              |double , numeric              |predictor |original |\n|kurt_inten_ch_4              |double , numeric              |predictor |original |\n|length_ch_1                  |double , numeric              |predictor |original |\n|neighbor_avg_dist_ch_1       |double , numeric              |predictor |original |\n|neighbor_min_dist_ch_1       |double , numeric              |predictor |original |\n|neighbor_var_dist_ch_1       |double , numeric              |predictor |original |\n|perim_ch_1                   |double , numeric              |predictor |original |\n|shape_bfr_ch_1               |double , numeric              |predictor |original |\n|shape_lwr_ch_1               |double , numeric              |predictor |original |\n|shape_p_2_a_ch_1             |double , numeric              |predictor |original |\n|skew_inten_ch_1              |double , numeric              |predictor |original |\n|skew_inten_ch_3              |double , numeric              |predictor |original |\n|skew_inten_ch_4              |double , numeric              |predictor |original |\n|spot_fiber_count_ch_3        |integer, numeric              |predictor |original |\n|spot_fiber_count_ch_4        |double , numeric              |predictor |original |\n|total_inten_ch_1             |integer, numeric              |predictor |original |\n|total_inten_ch_2             |double , numeric              |predictor |original |\n|total_inten_ch_3             |integer, numeric              |predictor |original |\n|total_inten_ch_4             |integer, numeric              |predictor |original |\n|var_inten_ch_1               |double , numeric              |predictor |original |\n|var_inten_ch_3               |double , numeric              |predictor |original |\n|var_inten_ch_4               |double , numeric              |predictor |original |\n|width_ch_1                   |double , numeric              |predictor |original |\n|class                        |factor   , unordered, nominal |outcome   |original |\n\n</div>\n:::\n:::\n\n\n\n## Transforming individual predictors\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\ncell_rec <- \n  recipe(class ~ ., data = cell_tr) %>% \n  step_YeoJohnson(all_predictors())\n```\n:::\n\n\n\n. . .\n\nThe YJ transformation can be used to produce more symmetric distirbutions for predictors. It is very similar to the Box-Cox transformation. \n\n\n## Standardize predictors\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\npca_rec <- \n  recipe(class ~ ., data = cell_tr) %>% \n  step_YeoJohnson(all_predictors()) %>% \n  step_normalize(all_predictors())\n```\n:::\n\n\n\n. . .\n\n- This centers and scales the numeric predictors.\n\n\n- The recipe will use the _training_ set to estimate the means and standard deviations of the data.\n\n. . .\n\n- All data the recipe is applied to will be normalized using those statistics (there is no re-estimation).\n\n## Convert the data to PCA components\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\npca_rec <- \n  recipe(class ~ ., data = cell_tr) %>% \n  step_YeoJohnson(all_predictors()) %>% \n  step_normalize(all_predictors()) %>% \n  step_pca(all_predictors(), num_comp = 10)\n```\n:::\n\n\n\n\n## Convert the data to PLS components\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\npca_rec <- \n  recipe(class ~ ., data = cell_tr) %>% \n  step_YeoJohnson(all_predictors()) %>% \n  step_normalize(all_predictors()) %>% \n  step_pls(all_predictors(), outcome = vars(class), num_comp = 10)\n```\n:::\n\n\n\n. . .\n\nSince PLS is supervised, we have to use the `outcome` argument. \n\n\n## Reduce correlation \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nfilter_rec <- \n  recipe(class ~ ., data = cell_tr) %>% \n  step_YeoJohnson(all_predictors()) %>% \n  step_corr(all_numeric_predictors(), threshold = 0.9)\n```\n:::\n\n\n\n. . .\n\nTo deal with highly correlated predictors, find the minimum set of predictor columns that make the pairwise correlations less than the threshold.\n\n\n\n## Using a workflow\n\n\n\n::: {.cell layout-align=\"center\" hash='part_5_cache/html/unnamed-chunk-6_a64250134914a6cad52d6cf78cd9762f'}\n\n```{.r .cell-code}\ncell_pca_wflow <-\n  workflow() %>%\n  add_recipe(pca_rec) %>%\n  add_model(logistic_reg())\n \nctrl <- control_resamples(save_pred = TRUE)\n\nset.seed(9)\ncell_glm_res <-\n  cell_pca_wflow %>%\n  fit_resamples(cell_rs, control = ctrl, metrics = cls_metrics)\n\ncollect_metrics(cell_glm_res)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|.metric     |.estimator |      mean|  n|   std_err|.config              |\n|:-----------|:----------|---------:|--:|---------:|:--------------------|\n|brier_class |binary     | 0.1384490| 10| 0.0044303|Preprocessor1_Model1 |\n|kap         |binary     | 0.5585936| 10| 0.0171313|Preprocessor1_Model1 |\n|roc_auc     |binary     | 0.8708377| 10| 0.0087731|Preprocessor1_Model1 |\n\n</div>\n:::\n:::\n\n\n\n\n## Recipes are estimated \n\nPreprocessing steps in a recipe use the *training set* to compute quantities.\n\n. . .\n\nWhat kind of quantities are computed for preprocessing?\n\n-   Levels of a factor\n-   Whether a column has zero variance\n-   Normalization\n-   Feature extraction\n-   Effect encodings\n\n. . .\n\nWhen a recipe is part of a workflow, this estimation occurs when `fit()` is called.\n\n_The recipe is estimated within each resample_.\n\n## Getting specific results\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncell_pca_fit <-\n  cell_pca_wflow %>% \n  fit(data = cell_tr)\n\ncell_pca_fit %>% \n  extract_recipe() %>% \n  tidy(number = 1)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|terms                       |      value|id               |\n|:---------------------------|----------:|:----------------|\n|angle_ch_1                  |  0.7870543|YeoJohnson_J3XdN |\n|area_ch_1                   | -0.9230326|YeoJohnson_J3XdN |\n|avg_inten_ch_1              | -0.3373947|YeoJohnson_J3XdN |\n|avg_inten_ch_2              |  0.4248360|YeoJohnson_J3XdN |\n|avg_inten_ch_3              |  0.1998680|YeoJohnson_J3XdN |\n|avg_inten_ch_4              |  0.2201345|YeoJohnson_J3XdN |\n|diff_inten_density_ch_1     | -0.9373952|YeoJohnson_J3XdN |\n|diff_inten_density_ch_3     |  0.1034994|YeoJohnson_J3XdN |\n|diff_inten_density_ch_4     |  0.1227716|YeoJohnson_J3XdN |\n|entropy_inten_ch_1          | -0.4397928|YeoJohnson_J3XdN |\n|entropy_inten_ch_3          |  2.4650002|YeoJohnson_J3XdN |\n|entropy_inten_ch_4          |  2.1801794|YeoJohnson_J3XdN |\n|eq_circ_diam_ch_1           | -1.9681681|YeoJohnson_J3XdN |\n|eq_ellipse_lwr_ch_1         | -1.5334241|YeoJohnson_J3XdN |\n|eq_ellipse_oblate_vol_ch_1  | -0.5114277|YeoJohnson_J3XdN |\n|eq_ellipse_prolate_vol_ch_1 | -0.4710798|YeoJohnson_J3XdN |\n|eq_sphere_area_ch_1         | -0.9207389|YeoJohnson_J3XdN |\n|eq_sphere_vol_ch_1          | -0.6132543|YeoJohnson_J3XdN |\n|fiber_align_2_ch_3          |  1.1738547|YeoJohnson_J3XdN |\n|fiber_align_2_ch_4          |  1.4336796|YeoJohnson_J3XdN |\n|fiber_length_ch_1           | -0.3788840|YeoJohnson_J3XdN |\n|fiber_width_ch_1            | -0.2927012|YeoJohnson_J3XdN |\n|inten_cooc_contrast_ch_3    |  0.2291612|YeoJohnson_J3XdN |\n|inten_cooc_contrast_ch_4    |  0.0798538|YeoJohnson_J3XdN |\n|inten_cooc_entropy_ch_3     |  2.8145882|YeoJohnson_J3XdN |\n|inten_cooc_entropy_ch_4     |  2.8367521|YeoJohnson_J3XdN |\n|inten_cooc_max_ch_3         | -2.6913188|YeoJohnson_J3XdN |\n|inten_cooc_max_ch_4         | -2.4449643|YeoJohnson_J3XdN |\n|kurt_inten_ch_1             | -0.2047088|YeoJohnson_J3XdN |\n|kurt_inten_ch_3             |  0.0175632|YeoJohnson_J3XdN |\n|kurt_inten_ch_4             | -0.2033418|YeoJohnson_J3XdN |\n|length_ch_1                 | -0.9362314|YeoJohnson_J3XdN |\n|neighbor_avg_dist_ch_1      | -0.0885369|YeoJohnson_J3XdN |\n|neighbor_min_dist_ch_1      | -0.2840849|YeoJohnson_J3XdN |\n|neighbor_var_dist_ch_1      |  1.0981665|YeoJohnson_J3XdN |\n|perim_ch_1                  | -1.1861136|YeoJohnson_J3XdN |\n|shape_bfr_ch_1              |  3.3819575|YeoJohnson_J3XdN |\n|shape_lwr_ch_1              | -1.9596862|YeoJohnson_J3XdN |\n|shape_p_2_a_ch_1            | -1.7088708|YeoJohnson_J3XdN |\n|skew_inten_ch_1             |  0.5324094|YeoJohnson_J3XdN |\n|skew_inten_ch_3             |  0.0135575|YeoJohnson_J3XdN |\n|skew_inten_ch_4             | -0.2397759|YeoJohnson_J3XdN |\n|spot_fiber_count_ch_3       |  0.0770626|YeoJohnson_J3XdN |\n|spot_fiber_count_ch_4       | -0.3529604|YeoJohnson_J3XdN |\n|total_inten_ch_1            | -0.2134360|YeoJohnson_J3XdN |\n|total_inten_ch_2            |  0.4077622|YeoJohnson_J3XdN |\n|total_inten_ch_3            |  0.2332207|YeoJohnson_J3XdN |\n|total_inten_ch_4            |  0.2251196|YeoJohnson_J3XdN |\n|var_inten_ch_1              | -0.4391163|YeoJohnson_J3XdN |\n|var_inten_ch_3              |  0.0993705|YeoJohnson_J3XdN |\n|var_inten_ch_4              |  0.2477299|YeoJohnson_J3XdN |\n|width_ch_1                  | -0.5587071|YeoJohnson_J3XdN |\n\n</div>\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncell_pca_fit %>% \n  extract_fit_parsnip() %>% \n  tidy()\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|term        |   estimate| std.error|   statistic|   p.value|\n|:-----------|----------:|---------:|-----------:|---------:|\n|(Intercept) | -1.0751107| 0.0804459| -13.3643876| 0.0000000|\n|PC01        |  0.4261641| 0.0244668|  17.4180236| 0.0000000|\n|PC02        |  0.2019107| 0.0228100|   8.8518644| 0.0000000|\n|PC03        |  0.3620528| 0.0276854|  13.0773720| 0.0000000|\n|PC04        | -0.1025577| 0.0334372|  -3.0671705| 0.0021610|\n|PC05        | -0.2415074| 0.0421861|  -5.7248038| 0.0000000|\n|PC06        | -0.1447344| 0.0442719|  -3.2692190| 0.0010784|\n|PC07        |  0.1322845| 0.0539470|   2.4521225| 0.0142016|\n|PC08        | -0.0348482| 0.0498619|  -0.6988935| 0.4846186|\n|PC09        | -0.0438050| 0.0609682|  -0.7184899| 0.4724552|\n|PC10        |  0.1036662| 0.0675752|   1.5340863| 0.1250084|\n\n</div>\n:::\n:::\n\n\n:::\n\n::::\n\n\n\n\n\n## Debugging a recipe\n\n- Typically, you will want to use a workflow to estimate and apply a recipe.\n\n. . .\n\n- If you have an error and need to debug your recipe, the original recipe object (e.g. `pca_rec`) can be estimated manually with a function called `prep()`. It is analogous to `fit()`. See [TMwR section 16.4](https://www.tmwr.org/dimensionality.html#recipe-functions)\n\n. . .\n\n- Another function (`bake()`) is analogous to `predict()`, and gives you the processed data back.\n\n. . .\n\n- The `tidy()` function can be used to get specific results from the recipe.\n\n## More on recipes\n\n-   Once `fit()` is called on a workflow, changing the model does not re-fit the recipe.\n\n. . .\n\n-   A list of all known steps is at <https://www.tidymodels.org/find/recipes/>.\n\n. . .\n\n-   Some steps can be [skipped](https://recipes.tidymodels.org/articles/Skipping.html) when using `predict()`.\n\n. . .\n\n-   The [order](https://recipes.tidymodels.org/articles/Ordering.html) of the steps matters.\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}