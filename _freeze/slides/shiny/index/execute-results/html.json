{
  "hash": "0499120e8da3d40789cbb1ec5d2b83ad",
  "result": {
    "markdown": "---\ntitle: \"Interactive web apps with Shiny\"\nauthor: \"Roy Francis\"\nimage: \"assets/featured.jpg\"\nformat: revealjs\n---\n\n\n## {visibility=\"hidden\"}\n\n\n::: {.cell}\n\n:::\n\n\n## Contents\n\n- Introduction\n- Code Structure\n- App execution\n- UI\n- Code execution\n- Reactivity\n- Updating widgets\n- Isolate\n- Error validation\n- Download\n- Deploy\n- Interactive documents\n- Extensions\n\n## \n\n![](assets/gallery.png){width=\"95%\"}\n[https://shiny.rstudio.com/gallery/](https://shiny.rstudio.com/gallery/)\n\n## What is shiny?\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n- Web applications & interactive documents\n- Completely created using R\n- Needs a live environment\n\n### Usage\n\n- [Standalone web applications](http://shiny.rstudio.com/gallery/see-more.html)\n- [Dashboard/Flexboard](http://rstudio.github.io/shinydashboard/examples.html)\n- Interactive RMarkdown\n- Gadgets/RStudio extensions\n\n:::\n\n::: {.column width=\"50%\"}\n\n### App structure\n\n- UI Layout\n- UI Inputs (Widgets)\n- UI Outputs\n- Renderer\n- Builder\n- [Function reference](https://shiny.rstudio.com/reference/shiny)\n\n:::\n::::\n\n## Code structure\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n**One file format**\n\n*app.R*\n\n```         \nui <- fluidPage()\nserver <- function(input,output) {}\nshinyApp(ui=ui,server=server)\n```\n:::\n\n::: {.column width=\"50%\"}\n**Two file format**\n\n*ui.R*\n\n```         \nui <- fluidPage()\n```\n\n*server.R*\n\n```         \nserver <- function(input,output) {}\n```\n\n```\nshiny::runApp(\"path/to/folder\")\n```\n:::\n::::\n\n## Running the app\n\n- Change to app directory, then run `runApp()`\n- Use `shinyApp()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(),\nserver=function(input,output) {}\n)\n```\n:::\n\n\n- From Rmd file using `rmarkdown::run()`\n- Running as a separate process from terminal\n\n```         \nR -e \"shiny::runApp('~/shinyapp')\"\n```\n\n## UI • Layout\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(\n  titlePanel(\"Title Panel\"),\n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Sidebar Panel\")\n    ),\n    mainPanel(tabsetPanel(\n                tabPanel(\"tab1\",\n                         fluidRow(\n                           column(6,helpText(\"Col1\")),\n                           column(6,\n                                  helpText(\"Col2\"),\n                                  fluidRow(\n                                    column(4,style=\"background-color:#b0c6fb\",helpText(\"Col1\")),\n                                    column(4,style=\"background-color:#ffa153\",helpText(\"Col2\")),\n                                    column(4,style=\"background-color:#b1f6c6\",helpText(\"Col3\"))\n                                  )\n                           )\n                         )\n                ),\n                tabPanel(\"tab2\",\n                         inputPanel(helpText(\"Input Panel\"))\n                ),\n                tabPanel(\"tab3\",\n                  wellPanel(helpText(\"Well Panel\"))\n                )\n              )\n    )\n  )\n),\nserver=function(input,output) {})\n```\n:::\n\n\n![](assets/app-layout.png){width=\"600px\"}\n\n## UI • Widgets • Input\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(\n  fluidRow(\n    column(4,\n           fileInput(\"file-input\",\"fileInput:\"),\n           selectInput(\"select-input\",label=\"selectInput\",choices=c(\"A\",\"B\",\"C\")),\n           numericInput(\"numeric-input\",label=\"numericInput\",value=5,min=1,max=10),\n           sliderInput(\"slider-input\",label=\"sliderInput\",value=5,min=1,max=10),\n           textInput(\"text-input\",label=\"textInput\"),\n           textAreaInput(\"text-area-input\",label=\"textAreaInput\"),\n           dateInput(\"date-input\",label=\"dateInput\"),\n           dateRangeInput(\"date-range-input\",label=\"dateRangeInput\"),\n           radioButtons(\"radio-button\",label=\"radioButtons\",choices=c(\"A\",\"B\",\"C\"),inline=T),\n           checkboxInput(\"checkbox\",\"checkboxInput\",value=FALSE),\n           actionButton(\"action-button\",\"Action\"),\n           hr(),\n           submitButton()\n    )\n  )\n),\nserver=function(input,output) {\n})\n```\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n![](assets/app-widgets-input.png){width=\"50%\"}\n:::\n::::\n\n[[Widgets gallery](http://shiny.rstudio.com/gallery/widget-gallery.html)]{.smaller}\n\n::: {.notes}\nWidgets are visual objects on a page to allow for data input. Input and output variables.\n:::\n\n## UI • Widgets • Outputs\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(fluidRow(column(5,\n           textInput(\"text_input\",label=\"textInput\",value=\"<h3 style='color:red'>Red text</h3>\"),\n           hr(),\n           htmlOutput(\"html_output\"),\n           textOutput(\"text_output\"),\n           verbatimTextOutput(\"verbatim_text_output\"),\n           tableOutput(\"table_output\"),\n           plotOutput(\"plot_output\",width=\"300px\",height=\"300px\")\n    ))),\n\nserver=function(input, output) {\n  output$html_output <- renderText({input$text_input})\n  output$text_output <- renderText({input$text_input})\n  output$verbatim_text_output <- renderText({input$text_input})\n  output$table_output <- renderTable({iris[1:3,1:3]})\n  output$plot_output <- renderPlot({\n    plot(iris[,1],iris[,2])\n  })\n})\n```\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n![](assets/app-widgets-output.png){width=\"70%\"}\n:::\n::::\n\n## Dynamic UI\n\n- UI elements are created conditionally using `uiOutput()`/`renderUI()`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"6,13-15\"}\nshinyApp(\nui=fluidPage(\n  selectInput(\"data\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table\"),\n uiOutput(\"ui\")\n),\n\nserver=function(input, output) {\n  \n  data <- reactive({ get(input$data, 'package:datasets') })\n  \n output$ui <- renderUI({\n  if(input$data==\"iris\") plotOutput(\"plot\",width=\"400px\")\n  })\n  \n  output$plot <- renderPlot({hist(data()[, 1])})\n  output$table <- renderTable({head(data())})\n})\n```\n:::\n\n\n- Other options include `conditionalPanel()`, `ìnsertUI()` and `removeUI()`\n\n## Code execution\n\n**App launch**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver <- function(input,output) {\n  output$text_output <- renderText({input$text_input})\n}\n```\n:::\n\n\n. . .\n\n**New user**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-4\"}\nui <- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver <- function(input,output) {\n  output$text_output <- renderText({input$text_input})\n}\n```\n:::\n\n\n. . .\n\n**Widget update**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nui <- fluidPage(textInput(\"text_input\",label=\"textInput\"), textOutput(\"text_output\"))\nserver <- function(input,output) {\n  output$text_output <- renderText({input$text_input})\n}\n```\n:::\n\n\n## Reactivity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output\")),\n  server=function(input,output) {\n    output$text_output <- renderText({\n        mean(rnorm(input$num_input))\n    })\n  })\n```\n:::\n\n\n![](assets/reactive1.png)\n\n## Reactivity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output\"), plotOutput(\"plot_output\")\n    ),\n  server=function(input,output) {\n    output$text_output <- renderText({\n        mean(rnorm(input$num_input))\n    })\n    output$plot_output <- renderPlot({\n      x <- rnorm(input$num_input)\n      hist(x,main=mean(x))\n    })\n  })\n```\n:::\n\n\n![](assets/reactive2.png)\n\n## Reactivity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui=fluidPage(\n    numericInput(\"num_input\",label=\"Observations\",value=50),\n    textOutput(\"text_output\"), plotOutput(\"plot_output\")\n    ),\n  server=function(input,output) {\n    rand <- reactive({ rnorm(input$num_input) })\n    output$text_output <- renderText({\n      mean(rand())\n    })\n    output$plot_output <- renderPlot({\n      x <- rand()\n      hist(x,main=mean(x))\n    })\n  })\n```\n:::\n\n\n![](assets/reactive3.png)\n\n::: {.notes}\nReactive functions can be use to share output from a common source. They can be used to reduce computation for demanding functions. Reactive values cannot be accessed from outside the reactive environment.\n\nTry changing the reactive function\n\n`rand <- reactive({ rnorm(input$num_input) })`\n\nto a regular function\n\n`rand <- function(){ rnorm(input$num_input) }`\n:::\n\n## Updating widgets\n\n- Widgets can be updated once initialised.\n\n. . .\n\n- Example of a typical UI\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui=fluidPage(\n  selectInput(\"select-input\",label=\"selectInput\",choices=c(\"A\",\"B\",\"C\")),\n  numericInput(\"numeric-input\",label=\"numericInput\",value=5,min=1,max=10),\n)\n```\n:::\n\n\n. . .\n\n- Add third argument **session** to server function\n- Update functions can be used to update input widgets\n- Reactive observer `observe({})` monitors for a conditional change\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver=function(input,output,session) {\n  observe({\n    if(something) {\n      updateSelectInput(session,\"select-input\",label=\"selectInput\",choices=c(\"D\",\"E\",\"F\"))\n      updateNumericInput(session,\"numeric-input\",label=\"numericInput\",value=10,min=1,max=10)\n    }\n  })}\n```\n:::\n\n\n## Isolate reactivity\n\n- Reactivity can be controlled.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\n  ui=fluidPage(\n    textInput(\"text_input\",label=\"textInput\"),\n    actionButton(\"btn_go\", \"Go!\"),\n    textOutput(\"text_output\")),\n  \n  server=function(input,output) {\n    output$text_output <- renderText({\n   input$btn_go\n   isolate(input$text_input)\n      })\n  }\n)\n```\n:::\n\n\n## Error validation\n\n- Shiny returns an error with missing or incorrect values\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input, output) {\n  getdata <- reactive({ get(input$data_input,'package:datasets') })\n  output$table_output <- renderTable({head(getdata())})\n})\n```\n:::\n\n\n:::\n\n::: {.column width=\"30%\"}\n![](assets/val1.png)\n:::\n::::\n\n## Error validation\n\n- Errors can be handled in a controlled manner\n\n. . .\n\n- `validate()` can be used to check input\n- `validate()` using `need()`\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"unknown\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input, output) {\n  getdata <- reactive({ \n  validate(need(try(input$data_input),\"Please select a data set\"))\n    get(input$data_input,'package:datasets') \n    })\n  output$table_output <- renderTable({head(getdata())})\n})\n```\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n![](assets/val2.png)\n:::\n::::\n\n## Error validation\n\n:::: {.columns}\n::: {.column width=\"70%\"}\n\n- `validate()` using custom function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalfn <- function(x) if(is.null(x) | is.na(x) | x==\"\") return(\"Input data is incorrect.\")\n\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"\",\"unknown\",\"mtcars\",\"faithful\",\"iris\")),\n  tableOutput(\"table_output\")\n),\n\nserver=function(input,output) {\n  getdata <- reactive({ \n  validate(valfn(try(input$data_input)))\n    get(input$data_input,'package:datasets')\n    })\n  output$table_output <- renderTable({head(getdata())})\n})\n```\n:::\n\n\n:::\n\n::: {.column width=\"30%\"}\n![](assets/val3.png)\n:::\n::::\n\n. . .\n\n- `shiny::req()` checks input variable and silently stops execution\n\n## Download • Data\n\n- Add button and `downloadHandler()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\", choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  textOutput(\"text_output\"),\n  downloadButton(\"button_download\",\"Download\")),\nserver=function(input, output) {\n  getdata <- reactive({ get(input$data_input, 'package:datasets') })\n  output$text_output <- renderText(paste0(\"Selected dataset: \",input$data_input))\n  \n  output$button_download <- downloadHandler(\n  filename = function() {\n     paste0(input$data_input,\".csv\")\n   },\n  content = function(file) {\n     write.csv(getdata(),file,row.names=FALSE,quote=F)\n   })\n})\n```\n:::\n\n\n- Run in system browser if Rstudio browser doesn't work\n\n## Download • Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(\nui=fluidPage(\n  selectInput(\"data_input\",label=\"Select data\",\n              choices=c(\"mtcars\",\"faithful\",\"iris\")),\n  textOutput(\"text_output\"),\n  plotOutput(\"plot_output\",width=\"400px\"),\n  downloadButton(\"button_download\", \"Download\")\n),\n\nserver=function(input, output) {\n  getdata <- reactive({ get(input$data_input, 'package:datasets') })\n  output$text_output <- renderText(paste0(\"Selected dataset: \",input$data_input))\n  output$plot_output <- renderPlot({hist(getdata()[, 1])})\n  \noutput$button_download <- downloadHandler(\n  filename = function() {\n    paste0(input$data_input,\".png\")\n  },\n  content = function(file) {\n    png(file)\n    hist(getdata()[, 1])\n    dev.off()\n  })\n})\n```\n:::\n\n\n- Run in system browser if Rstudio browser doesn't work\n- See usage of download buttons\n\n## Deployment\n\n- R scripts\n  - GitHub\n  - R Package\n  - Docker container\n\n- Webpage\n  - Shinyapps.io\n  - Shiny Server (Free)\n  - Shiny Server Pro\n\n. . .\n\n- Automatically deploying to shinyapps.io\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rsconnect)\nrsconnect::setAccountInfo(name=\"username\", token=\"HDFGT46YF7TDT6474G47\", secret=\"hdgTDF5FStgdkpJ\")\ndeployApp(appName=\"name\")\n```\n:::\n\n\n. . .\n\n- [Shiny apps user guide](https://docs.rstudio.com/shinyapps.io/index.html)\n- [Shiny server guide](https://docs.rstudio.com/shiny-server/)\n\n## Interactive documents • Quarto\n\n````\n---\ntitle: \"Old Faithful\"\nformat: html\nserver: shiny\n---\n\n```{{r}}\nsliderInput(\"bins\", \"Number of bins:\", min = 1, max = 50, value = 30)\nplotOutput(\"distPlot\")\n```\n\n```{{r}}\n#| context: server\noutput$distPlot <- renderPlot({\n  x <- faithful[, 2]\n  bins <- seq(min(x), max(x), length.out = input$bins + 1)\n  hist(x, breaks = bins, col = 'darkgray', border = 'white')\n})\n```\n````\n\n## Interactive documents • Rmarkdown\n\n- Shiny can run in RMarkdown documents. Set YAML `runtime: shiny`.  \n\n````        \n---\ntitle: Interactive document\noutput: html_document\nruntime: shiny\n---\n````\n\n- Shiny widgets can be included directly  \n\n````\n```{{r}}\nselectInput('n_breaks',label='Number of bins:',choices=c(10,20,35,50),selected=20)\n```\n````\n\n## Interactive documents\n\n- Whole shiny apps can be included directly  \n\n````\n```{{r}}\nshinyApp(\n  ui=fluidPage(),\n  server=function(input,output) {}\n)\n```\n````\n\n- Hosted shiny apps can be embedded using `<iframe>`  \n\n```         \n<iframe src=\"https://user.shinyapps.io/app\"></iframe>\n```\n\n## Extensions\n\n- [Naxstats](https://github.com/nanxstats/awesome-shiny-extensions): Repo collection of shiny extensions\n- [bslib](https://rstudio.github.io/bslib): Bootswatch themes for shiny\n- shinyurl: using URLs to recreate state of an app\n- shinypod: Reusable modules\n- [shinyjs](https://deanattali.com/shinyjs/): Custom javascript functionality\n- [shinyWidgets](https://github.com/dreamRs/shinyWidgets): Bootstrap 3 custom widgets\n- [shinyBS](https://github.com/ebailey78/shinyBS): Bootstrap 3 widgets\n- [shinymanager](https://datastorm-open.github.io/shinymanager/): Authentication for shiny apps\n\n## Help\n\n- [**Mastering Shiny Book**](https://mastering-shiny.org/index.html)\n- [**Shiny Interfaces**](https://unleash-shiny.rinterface.com/index.html)\n- [**Posit Shiny home**](https://shiny.posit.co/) \n- [**Posit Shiny articles**](https://shiny.posit.co/r/articles/)\n\n### Other topics\n\n- [Shiny modules](https://shiny.posit.co/r/articles/improve/modules/)\n- [Shiny profiling](https://shiny.posit.co/r/articles/improve/profiling/)\n- [Shiny unit tests](https://shiny.posit.co/r/articles/improve/testing-overview/)\n- [Applications of action buttons](https://shiny.posit.co/r/articles/build/action-buttons/)  \n- [Progress indicators](https://shiny.posit.co/r/articles/build/progress/)  \n- ...\n\n## {background-image=\"../../assets/images/cover.jpg\"}\n\n### Thank you! Questions?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n         _                     \nplatform x86_64-conda-linux-gnu\nos       linux-gnu             \nmajor    4                     \nminor    2.2                   \n```\n:::\n:::\n\n\n[2023 • [SciLifeLab](https://www.scilifelab.se/) • [NBIS](https://nbis.se/) • [RaukR](https://nbisweden.github.io/workshop-RaukR-2306/)]{.smaller}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}