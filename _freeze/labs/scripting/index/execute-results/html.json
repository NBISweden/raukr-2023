{
  "hash": "81c1dd5b3ec72476961a7929b596565d",
  "result": {
    "markdown": "---\ntitle: \"Functions & Scripts\"\nauthor: \"Sebastian DiLorenzo, Markus Mayrhofer\"\ndescription: \"Modularising R code into functions and running R in the terminal.\"\nimage: \"assets/featured.jpg\"\nformat: html\n---\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-note}\n> - Write programs that do one thing and do it well.\n> - Write programs to work together.\n> - Write programs to handle text streams, because that is a universal interface.\n>\n> -- The UNIX philosophy, Doug McIlroy\n\nIn this exercise we will write a few functions and execute R scripts from the command line and provide them with options and data.\n:::\n\n## R Functions\n\nLet's jump right in and create a function. Your function should have it's own *function_name*, atleast two *parameters* one of which with a default argument, code that performs some *operations* on the input and a *return* value. I do encourage you to think about it and make your own function, rather than copying the examples. Examples should be seen more as explanatory, semantic and inspirational.\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name <- function(param1, param2 = \"Lucy\"){\n  if (param2 == \"Lucy\") {\n    output <- paste(\"Lucy in the sky with \",param1,\"\\n\",sep=\"\")}\n  else {\n    output <- paste(param1,\" in the ocean with \",param2,\"\\n\",sep=\"\")}\n  return(cat(output))\n}\n```\n:::\n\n\nTest your function to make sure it gives the output you would expect given different arguments.\n\n- What happens if you don't assign a argument to the parameter that does not have a default?\n- Did I need to use the `return()` function in my example?\n- Why does my example perform the `cat()` function in the `return()` function?\n- Try assigning a variable to the return value of your function.\n  ` variable_a <- function_name(\"Tom\")` \n- What happens to the variable if the return value is the output of `cat()`?\n\nNow lets see the power of your function in action. Write a loop that executes your function multiple times. Functions are great for performing operations on a number of files, objects or elements in objects that fit a certain condition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in c(\"Tom\",\"Mary\",\"Mahesh\",\"Henrik\")){\n  function_name(param1=i,param2=\"Brad\")\n  function_name(param1=i,param2=\"Lucy\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTom in the ocean with Brad\nLucy in the sky with Tom\nMary in the ocean with Brad\nLucy in the sky with Mary\nMahesh in the ocean with Brad\nLucy in the sky with Mahesh\nHenrik in the ocean with Brad\nLucy in the sky with Henrik\n```\n:::\n:::\n\n\nNow let's take a look at the special ellipsis parameter for functions. Basically the ellipsis say that a function can take additional arguments. The function should work without arguments given at the ellipsis. One great example of this is the `data.frame()` function.\n\nFrom `?data.frame`\n\n```         \nUsage\ndata.frame(..., row.names = NULL, check.rows = FALSE,\n           check.names = TRUE, fix.empty.names = TRUE,\n           stringsAsFactors = default.stringsAsFactors())\n```\n\nThe ellipsis can be used to add columns to the data.frame. Try creating a data.frame with one column and one with several. Also, try creating a data.frame with no arguments for `...`, what happens?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(a=c(1,2,3))\ndata.frame(a=c(1,2,3),b=c(4,5,6))\n```\n:::\n\n\nAnother example where ellipsis are often used is to pass plot arguments into a function.\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_plot <- function(...){\n  plot(c(1,2,3),c(1,2,3),...)\n}\n\nmy_plot(main=\"Great title\", xlab = \"This will be X-label of plot\", ylab=\"Y-label\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nTry creating your own function that uses the ellipsis parameter.\n\n## R Scripts\n\nWhile many R users write and execute code interactively (in e.g. RStudio), you can run the content of a script by writing `source(\"myscriptfile.R\")` in the R console. This is also a convenient way to load your custom functions (and this is actually what happens when you load an installed package with `library()`).\n\nBut once you have code that works you may want to run it routinely without an interactive R environment. R scripts can be executed directly from the command line by typing `Rscript myscriptfile.R`.\n\n- Make an R script that prints a summary of a sample (n=1000) from a normal distribution. Save it as a `.R` file and execute it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example of a small script\nmydata=rnorm(1000)\nprint(summary(mydata))\n```\n:::\n\n\nYou can also execute your script by typing its name in the console, provided it:\n\n1. Starts with a **hashbang** line that instructs your system how to interpret it, e.g. `#!/usr/bin/env Rscript`\n2. Is an executable file e.g. through `chmod +x myscriptfile.R` on Unix systems. If you are on windows you are on your own =).\n\nTask:\n\n- Modify your script and run it without `Rscript`.\n- Go into a different folder, can you execute it without giving the path to the script?\n\n<!--\n\n::: {.cell}\n\n```{.r .cell-code}\n#!/usr/bin/env Rscript\nmydata=rnorm(1000)\nprint(summary(mydata))\n```\n:::\n\n-->\n\n## Passing and parsing arguments\n\nIt's unlikely that you would need to run the exact same process over and over again without any change in what data is processed or how it's processed. One way to control the behavior of your code is to provide arguments to it. These commonly refer to file names or settings. You can supply arguments after the name of your script where you invoke it. In R, they are available from `commandArgs()`.\n\n- Add `commandArgs()` to your script. Execute the script to print the arguments. Run it with a few extra words or numbers and see what happens.\n\nYou can use `commandArgs(trailingOnly = TRUE)` to suppress the first few items and access your actual arguments.\n\n- Make your script use the first argument provided as the mean of the normal distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#!/usr/bin/env Rscript\nfirstarg=as.numeric(commandArgs(trailingOnly = TRUE)[1])\nmydata=rnorm(1000,mean = firstarg)\nprint(summary(mydata))\n```\n:::\n\n\nProcessing multiple arguments may become complicated, especially if you want to be able to use C-like long and short flags such as `-o outputfile -i inputfile --distribution normal`. Packages that support such options include `getopt`, `optparse` and `argparser`.\n\n- Use the `optparse` package to modify your script to accept the argument `-m` or `--mean` (followed by the value) for mean value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#!/usr/bin/env Rscript\n\n# don't say \"Loading required package: optparse\" every time\nsuppressPackageStartupMessages(require(optparse))\n\noption_list = list(\n  make_option(c(\"-m\", \"--mean\"), default=0)\n  # you could put the next option here\n)\noptions = parse_args(OptionParser(option_list=option_list))\nmy_mean=as.numeric(options$mean)\n\nmydata=rnorm(1000,mean = my_mean)\nprint(summary(mydata))\n```\n:::\n\n\n## Standard in and out\n\nA convenient feature of command line scripts is the possibility to pipe data from one script to another, thereby avoiding the need for intermediate files. You can use `file('stdin')` and `open()` to define and open the connection in R and `readLines()` to read one or more lines from it.\n\n- Make your script parse the mean value from a text stream, and run it using the pipe e.g. `echo 100 | ./myscriptfile.R`.\n- Using the same script, supply the mean from a text file (containing only that) with `cat`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#!/usr/bin/env Rscript\ninput_con  <- file(\"stdin\")\nopen(input_con)\noneline <- readLines(con = input_con, n = 1, warn = FALSE)\nclose(input_con)\nmean=as.numeric(oneline)\nmydata=rnorm(1000,mean = mean)\nprint(summary(mydata))\n```\n:::\n\n\nYou can pipe your output to another process (any script or tool that accepts a stream) by appending `| next_tool_or_script_call` to the call, or to a file by appending `> filename`.\n\n- What happens if a warning is generated by your script, e.g. with `warning('Something is wrong')` and you pipe the output to a file?\n- Why?\n<!-- Answer: It only prints stdout to file, because the error comes to stderr, not stdout -->\n\nYou can use `write(x,file=stderr())` or `write(x,file=stdout())` to explicitly divert certain output.\n\nWell done, you should now know the basics of creating functions and some different kinds of R scripts.\n\n<!-- # Bonus challenges\n\nIf you have time, practice by writing an R script that you need in your own work, or select either of the following:\n\n* Write a script that parses any text stream by line from either a file (when specified) or *stdin*, and writes to either another file (when specified) or *stdout*. Each line is written with a certain probability which is also provided as an argument (lines that start with **#** are always written). Report to *stderr* the number of lines read and written. Try your script on any *fastq*, *bam*/*sam*, or *vcf*-formatted data.\n\n* Write a script that summarizes the content of a table contained in a plain text file. The table is supplied either as a file (when specified) or as a stream. Make sure any lines starting with *#* are ignored. For speed, do not use more than a maximum of 1000 lines as default, or another number if supplied as an argument. Try your script on any tabular data you have available.\n\n-->\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}