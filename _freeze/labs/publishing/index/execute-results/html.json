{
  "hash": "d5cd977fa317a9873ec53689aea15e04",
  "result": {
    "markdown": "---\ntitle: \"Publishing\"\nauthor: \"Roy Francis\"\ndescription: \"Literate programming and documentation in R.\"\nimage: \"assets/featured.jpg\"\nformat: html\n---\n\n\n::: callout-note\nThese are exercises to get you started with quarto. Refer to the [official quarto documentation](https://quarto.org).\n\n- Quarto usage\n- markdown markup\n- Set up a quarto notebook\n- Add content and export to some common formats\n  - HTML and PDF reports\n  - RevealJS presentation\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(stringr)\n```\n:::\n\n\n## Introduction\n\nCreate a quarto document by creating a text file with **.qmd** extension. In RStudio, go to **File > New File > Quarto Document**. You are given the option to set title, author etc as well as output format. Set the output format as html. This document is a quarto notebook or R notebook. You can set the display mode to be **Source** or **Visual** (where text formatting is shown).\n\nYou could just enter some text in the qmd file and render it and that would render a plain HTML file by default. And that's fine. But, it is often useful to enter some metadata information such as title, author etc. And this is defined in the YAML matter.\n\n### YAML\n\nThe content on the top of the quarto document within three dashes is the YAML matter. This is optional. It is really up to the author to decide how much information needs to be entered here. Here are some common base level YAML parameters.\n\n````\n---\ntitle: \"My report\"\nsubtitle: \"A subtitle for the report\"\ndescription: \"This is a longer description of this report.\"\nauthor: \"John Doe\"\ndate: \"25-Apr-2022\"\n---\n````\n\n::: {.shadow}\n![](assets/report-a.png)\n:::\n\nThe default output format is html and this can be changed or arguments for this can be adjusted by specifying this in the yaml. Here is an updated version:\n\n````\n---\ntitle: \"My report\"\nsubtitle: \"A subtitle for the report\"\ndescription: \"This is a longer description of this report.\"\nauthor: \"John Doe\"\ndate: last-modified\ndate-format: \"DD-MMM-YYYY\"\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    number-sections: true\n    number-depth: 4\n---\n\n# Section 1\n\nThis is some text\n\n# Section 2\n\nHere is some more text\n````\n\n::: {.shadow}\n![](assets/report-b.png)\n:::\n\nDate is now set as **last-modified** which means it is automatically updated whenever the document is rendered. The date format is adjusted by setting **date-format: \"DD-MMM-YYYY\"**. In addition, the output format is now explicitly specified. The table of contents is enabled and it's depth is set to 4. Section numberings are enabled and depth is set to 4. Try changing some of these arguments to see how it affects the output.\n\nHere is a more complex version:\n\n````\n---\ntitle: \"My report\"\nsubtitle: \"A subtitle for the report\"\ndescription: \"This is a longer description of this report.\"\nauthor: \"John Doe\"\ndate: last-modified\ndate-format: \"DD-MMM-YYYY\"\nformat:\n  html:\n    title-block-banner: true\n    smooth-scroll: true\n    toc: true\n    toc-depth: 4\n    toc-location: right\n    number-sections: true\n    number-depth: 4\n    code-fold: true\n    code-tools: true\n    code-copy: true\n    code-overflow: wrap\n    df-print: kable\n    standalone: false\n    fig-align: left\n---\n\n# Section 1\n\nThis is some text\n\n# Section 2\n\nHere is some more text\n\n```{{r}}\ndate()\n```\n````\n\n::: {.shadow}\n![](assets/report-c.png)\n:::\n\n**title-block-banner: true** displays the blue banner. **code-fold: true** folds the code and reduces clutter. **code-copy: true** adds a copy icon in the code chunk and allows the code to be copied easily. **code-tools: true** adds options to the top right of the document to allow the user to show/hide all code chunks and view source code. **df-print: kable** sets the default method of displaying tables. **standalone: false** specifies if all assets and libraries must be integrated into the output html file as a standalone document.\n\nFor a complete guide to YAML metadata for HTML, see [here](https://quarto.org/docs/reference/formats/html.html#metadata).\n\n### Text\n\nThe above level 2 heading was created by specifying `# Section 1`. Other headings can be specified similarly.\n\n```\n## Level 2 heading  \n### Level 3 heading  \n#### Level 4 heading  \n##### Level 5 heading  \n###### Level 6 heading\n```\n\nItalic text like this *This is italic text* can be specified using `*This is italic text*` or `_This is italic text_`. Bold text like this **This is bold text** can be specified using `**This is italic text**` or `__This is italic text__`. Subscript written like this `H~2~O` renders as H~2~O. Superscript written like this `2^10^` renders as 2^10^.\n\nBullet points are usually specified using `-`.\n\n```\n- Point one\n- Point two\n```\n\n- Point one\n- Point two\n\nBlock quotes can be specified using `>`.\n\n```\n> This is a block quote. This\n> paragraph has two lines.\n```\n\n> This is a block quote. This paragraph has two lines.\n\nLists can also be created inside block quotes.\n\n```\n> 1. This is a list inside a block quote.\n> 2. Second item.\n```\n\n> 1.  This is a list inside a block quote.\n> 2.  Second item.\n\nLinks can be created using `[this](https://quarto.org)` like [this](https://quarto.org).\n\n### Images\n\nImages can be displayed from a relative local location using `![This is a caption](assets/gotland.jpg)`. For example:\n\n![This is a caption](assets/gotland.jpg)\n\nBy default, the image is displayed at full scale or until it fills the display width. The image dimension can be adjusted `![This is a caption](assets/gotland.jpg){width=40%}`.\n\n![This is a caption](assets/gotland.jpg){width=\"40%\"}\n\nFor finer control, raw HTML can be used. For example;\n\n```\n<img src=\"assets/gotland.jpg\" width=\"150px\">\n```\n\n<img src=\"assets/gotland.jpg\" width=\"150px\"/>\n\nImages can also be displayed using R code. Chunks option `out.width` in RMarkdown can be used to control image display size.\n\nThis image is displayed at a size of 200 pixels.\n\n````\n```{{r}}\n#| out-width: \"200px\"\nknitr::include_graphics(\"assets/gotland.jpg\")\n```\n````\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/gotland.jpg){width=200px}\n:::\n:::\n\n\nThis image is displayed at a size of 75 pixels.\n\n````\n```{{r}}\n#| out-width: \"75px\"\nknitr::include_graphics(\"assets/gotland.jpg\")\n```\n````\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/gotland.jpg){width=75px}\n:::\n:::\n\n\n### Code\n\nText can be formatted as code. Code is displayed using monospaced font. Code formatting that stands by itself as a paragraph is called block code. Block codes are specified using three backticks ```` ``` ```` followed by code and then three more backticks.\n\nThis text below\n\n````\n```\nThis is generic block code.\n```\n````\n\nrenders like this\n\n```\nThis is generic block code.\n```\n\nCode formatting can also be included in the middle of a sentence. This is called inline code formatting. Using this `` `This is an inline formatted code.` `` renders like this: `This is an inline formatted code.`\n\nThe above codes are not actually executed. They are just text formatted in a different font. Code can be executed by specifying the language along with the backticks. Block code formatted as such:\n\n````\n```{{r}}\nstr(iris)\n```\n````\n\nrenders like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n:::\n:::\n\n\nCode blocks are called chunks. The chunk is executed when this document is rendered. In the above example, the rendered output has two chunks; input and output chunks. The rendered code output is also given code highlighting based on the language. For example;\n\nThis code chunk\n\n````\n```{{r}}\n#| eval: false\nggplot(dfr4,aes(x=Month,y=fraction,colour=Year,group=Year))+\n  geom_point(size=2)+\n  geom_line()+\n  labs(x=\"Month\",y=\"Fraction of support issues\")+\n  scale_colour_manual(values=c(\"#000000\",\"#E69F00\",\"#56B4E9\",\n  \"#009E73\",\"#F0E442\",\"#006699\",\"#D55E00\",\"#CC79A7\"))+\n  theme_bw(base_size=12,base_family=\"Gidole\")+\n  theme(panel.border=element_blank(),\n        panel.grid.minor=element_blank(),\n        panel.grid.major.x=element_blank(),\n        axis.ticks=element_blank())\n```\n````\n\nwhen rendered (`echo: true` by default, but not evaluated) looks like\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dfr4,aes(x=Month,y=fraction,colour=Year,group=Year))+\n  geom_point(size=2)+\n  geom_line()+\n  labs(x=\"Month\",y=\"Fraction of support issues\")+\n  scale_colour_manual(values=c(\"#000000\",\"#E69F00\",\"#56B4E9\",\n  \"#009E73\",\"#F0E442\",\"#006699\",\"#D55E00\",\"#CC79A7\"))+\n  theme_bw(base_size=12,base_family=\"Gidole\")+\n  theme(panel.border=element_blank(),\n        panel.grid.minor=element_blank(),\n        panel.grid.major.x=element_blank(),\n        axis.ticks=element_blank())\n```\n:::\n\n\nThe behaviour of code chunks can be adjusted using chunk parameters or execution options. The chunk has several options which can be used to control chunk properties.\n\nUsing `eval: false` prevents that chunk from being executed. `eval: true` which is the default, executes the chunk. Using `echo: false` prevents the code from that chunk from being displayed. Using `output: false` hides the output from that chunk. Here are some of them:\n\n| Option  | Default  | Description                          |\n|---------|----------|--------------------------------------|\n| eval    | true     | Evaluates the code in this chunk     |\n| echo    | true     | Display the code                     |\n| output  | true     | true, false or asis                  |\n| warning | true     | Display warnings from code execution |\n| error   | false    | Display error from code execution    |\n| message | true     | Display messages from this chunk     |\n| include | true     | Include this chunk or not            |\n\nChunk options are specified like this:\n\n````\n```{{r}}\n#| eval: false\n#| echo: false\n#| fig-height: 6\n#| fig-width: 7\n```\n````\n\nThese chunk arguments or execution options can also be set globally in the YAML matter.\n\n```\n---\nexecute:\n  eval: true\n  echo: false\n---\n```\n\nThere are many other [execution options](https://quarto.org/docs/computations/execution-options.html). \n\n### Tables\n\nThis is a table with a label and a dynamically generated caption.\n\n````\n```{{r}}\n#| label: tbl-iris\n#| tbl-cap: !expr paste0(\"The column names are\",paste(colnames(iris),collapse=\", \"))\n\nhead(iris)\n```\n````\n\n\n::: {#tbl-iris .cell tbl-cap='The column names areSepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| Sepal.Length| Sepal.Width| Petal.Length| Petal.Width|Species |\n|------------:|-----------:|------------:|-----------:|:-------|\n|          5.1|         3.5|          1.4|         0.2|setosa  |\n|          4.9|         3.0|          1.4|         0.2|setosa  |\n|          4.7|         3.2|          1.3|         0.2|setosa  |\n|          4.6|         3.1|          1.5|         0.2|setosa  |\n|          5.0|         3.6|          1.4|         0.2|setosa  |\n|          5.4|         3.9|          1.7|         0.4|setosa  |\n\n</div>\n:::\n:::\n\n\nTables can be also be simple markdown.\n\n```\n|#|Sepal.Length|Sepal.Width|Petal.Length|Petal.Width|Species|\n|---|---|---|---|---|---|\n|1|5.1|3.5|1.4|0.2|setosa|\n|2|4.9|3.0|1.4|0.2|setosa|\n|3|4.7|3.2|1.3|0.2|setosa|\n|4|4.6|3.1|1.5|0.2|setosa|\n\n: This is a caption {#tbl-markdown-table}\n```\n\n|#|Sepal.Length|Sepal.Width|Petal.Length|Petal.Width|Species|\n|---|---|---|---|---|---|\n|1|5.1|3.5|1.4|0.2|setosa|\n|2|4.9|3.0|1.4|0.2|setosa|\n|3|4.7|3.2|1.3|0.2|setosa|\n|4|4.6|3.1|1.5|0.2|setosa|\n\n: This is a caption {#tbl-markdown-table}\n\n### Plots\n\nR Plots can be plotted like below:\n\n````         \n```{{r}}\n#| label: fig-plot-a\n#| fig-cap: This is a figure caption.\n#| fig-height:6\n#| fig-width: 6\nplot(x=iris$Petal.Length,y=iris$Petal.Width)\n```\n````\n\n\n::: {.cell}\n::: {.cell-output-display}\n![This is a figure caption.](index_files/figure-html/fig-plot-a-1.png){#fig-plot-a width=576}\n:::\n:::\n\n\n### Export\n\nThe quarto notebook can be exported into various format. The most common formats are HTML and PDF.\n\n#### HTML\n\nThe quarto document can be previewed as an HTML inside RStudio by clicking the 'Render' button.\n\nThe document can be exported from R using the **quarto** R package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render(\"document.qmd\")\n```\n:::\n\n\nThe document can be rendered from the terminal as such:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto render document.qmd\n```\n:::\n\n\nHTML documents can be opened and viewed in any standard browser such as Chrome, Safari, Firefox etc.\n\n#### PDF\n\nA qmd document can be converted to a PDF. Behind the scenes, the markdown is converted to TeX format. The conversion to PDF needs a tool that understands TeX format and converts to PDF. This can be softwares like 'MacTeX', 'MikTeX' etc. which needs to be installed on the system beforehand. A light-weight option is to install R package **tinytex**.\n\nThe **format** argument in the YAML matter must be changed to `pdf`, and the **pdf-engine** option may need to be changed as needed. If using **tinytex**, set **pdf-engine: pdflatex**.\n\nSometimes TeX converters may need additional libraries which may need to be installed. And all features of HTML are not supported on TeX which may return errors.\n\nSee [here](https://quarto.org/docs/reference/formats/pdf.html) for more PDF options.\n\n## Report\n\nTry to recreate the report below:\n\n::: {.shadow}\n![](challenges/report.png)\n:::\n\nClick [here](challenges/report.html) to view the sample report. The source code for the page is available on the page.\n\nThe aim of the report is to subset the iris dataset and create a report on the subsetted data.\n\nThis is how the YAML metadata is organised:\n\n```{{yaml}}\n---\nsubtitle: \"Parameterized report\"\nauthor: \"John Doe\"\ndate: last-modified\nformat:\n  html:\n    title-block-banner: true\n    toc: true\n    number-sections: true\n    theme: pulse\n    highlight: kate\n    code-tools: true\n    fig-align: left\n\nparams:\n  name: setosa\n---\n```\n\n- Since this a parameterized report, `params` is defined in the YAML metadata. Here we have one parameter `name` with default value **setosa**. The parameter can be passed in while rendering the document. If no parameter is passed, the default value is used.\n- The title takes this parameter to create a title with the name.\n- The output format is set to `html`.\n- Table of contents (`toc`) is enabled.\n- `title-block-banner` is enabled\n- The theme is set to `pulse`. More themes are available at [bootswatch](https://bootswatch.com)\n- `code-tools` creates a widget on the top right side of the document to view source code.\n\nA heading is created through code using param value.\n\n````\n```{{r}}\n#| echo: false\n#| output: asis\ncat(\"## \",params$name)\n```\n````\n\nThis code chunk is used to create a plot along with plot caption and plot numbering.\n\n````\n```{{r}}\n#| label: fig-scatterplot\n#| fig-cap: !expr paste0(\"Scatterplot of \",params$name,\" species.\")\nggplot(iris_filtered,aes(Sepal.Length,Petal.Length,col=Species))+\n    geom_point()+\n    labs(title=params$name)\n```\n````\n\n- It is important that the figure label starts with `fig-`\n- The figure caption can be generated from code using the special `!expr` usage\n- Try to create a new report for the species **versicolor**\n- Try to convert the document to PDF\n\nHTML ouputs are documented [here](https://quarto.org/docs/output-formats/html-basics.html).\n\n## RevealJS\n\nNow, we will convert the report to a presentation using revealjs. [Here](challenges/revealjs.html) is how the final presentation will look like.\n\n- The most important change is `format: html` to `format: revealjs`\n- Slides are defined by heading `##`\n- Slides can be hidden using `{visibility=\"hidden\"}`\n\n```\n## Title {visibility=\"hidden\"}\n```\n\n- Incremental lists can be created like this\n\n```\n::: {.incremental}\n- Eat spaghetti\n- Drink wine\n:::\n```\n\n- Columns can be defined like this\n\n```\n:::: {.columns}\n\n::: {.column width=\"40%\"}\nLeft column\n:::\n\n::: {.column width=\"60%\"}\nRight column\n:::\n\n::::\n```\n\n- Speaker view is created like this:\n\n```\n::: {.notes}\nSpeaker notes go here.\n:::\n```\n\nThis can be viewed by pressing the <kbd>S</kbd> key.\n\n- The presentation theme can be changed\n\n```\nformat:\n  revealjs: \n    theme: dark\n```\n\n- Minor slide content can be defined as below. This content will be smaller font size and pushed to the bottom.\n\n```\n::: aside\nSome additional commentary of more peripheral interest.\n:::\n```\n\n- Code chunks can have line highlighting\n\n````\n```{{r code-line-numbers=\"4-5\"}}\nlibrary(ggplot2)\n\nggplot(iris,aes(Sepal.Length, Petal.Length))+\n  geom_point()+\n  theme_bw()\n```\n````\n\n- Tabset panels\n\n```\n::: {.panel-tabset}\n\n### Tab A\n\nContent for `Tab A`\n\n### Tab B\n\nContent for `Tab B`\n\n:::\n```\n\nRevealJS features are documented [here](https://quarto.org/docs/presentations/revealjs/).\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}